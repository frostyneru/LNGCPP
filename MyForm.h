#include <string>
#include <math.h>
#include <iostream>

#pragma once
// 0 - LNG 
// 1 - Methane
// 2 - Ethane
// 3 - Propane
// 4 - Iso-buthan
// 5 - N-buthan
// 6 - Iso-penthane
// 7 - N-penthane
// 8 - Nitrogen
// 9 - Carbon dioxide

//Количество элементов в СПГ
const int n = 10;                            
//ПИ
const double pi = 3.141592654;      
//Стандартное давление
const double p_st = 0.101325;                
//1 мм.рт.ст. в Па
const double p_mm = 133.322;            

/*
const string name_ru[n] =                       //Названия компонентов на русском языке
{
	"СПГ", "Метан", "Этан", "Пропан", "Изобутан", "н-Бутан",
	 "Изопентан", "н-Пентан", "Азот", "Диоксид углерода"
};
*/

//Критические плотности компонентов
double ro_kr[n] =                               
{
	 0, 162.66, 206.18, 220.4781, 225.5, 228.0, 236.0, 232.0, 313.3, 467.6
};
//Критические температуры компонентов
double T_kr[n] =                                
{
	0, 190.564, 305.322, 369.89, 407.81, 425.125, 460.39, 469.65, 126.192, 304.1282
};
//Теплота сублимации компонентов
const double h0_0[n] =                                
{
	0, 572.6, 968.426, 324.794, 0, 0, 0, 0, 0, 0
};
//Энтальпия компонентов при 100 К
const double h00[n] =                                 
{
	0, 3.9941, 4.067, 0, 0, 0, 0, 0, 0, 0
};
//Энтропия компонентов при 100 К
const double s00[n] =                                 
{
	0, 20.5613, 22.1158, 3.294825, 0, 0, 0, 0, 0, 0
};
//Ацентрические факторы Питцера компонентов
double omega[n] =                               
{
	0, 0.008, 0.098, 0.152, 0.176, 0.193, 0.227, 0.251, 0.04, 0.225
};


/*+*/ const double alpha[n][n] =              //Параметры бинарного взаимодействия компонентов
{
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 1.0,    0.9939062,   1.0103380,   1.0292220,   1.0492640,   1.3399560,   1.1743400,   1.0078860,   1.0 },
    {0.0, 0.9939062,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 },
    {0.0, 1.0103380,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 },
    {0.0, 1.0292220,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 },
    {0.0, 1.0492640,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 },
    {0.0, 1.3399560,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 },
    {0.0, 1.1743400,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 },
    {0.0, 1.0078860,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 },
    {0.0, 1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 }
};
/*+*/ const double betta[n][n] =              //Параметры бинарного взаимодействия компонентов
{
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 1,   0.9932865,   0.9964106,   0.9798303,   0.9709773,   0.8788424,   0.9302709,   0.9417593,   1.0},
    {0.0, 0.9932865,   1,   1,   1,   1,   1,   1,   1.0,   1.0 },
    {0.0, 0.9964106,   1,   1,   1,   1,   1,   1,   1.0,   1.0 },
    {0.0, 0.9798303,   1,   1,   1,   1,   1,   1,   1.0,   1.0 },
    {0.0, 0.9709773,   1,   1,   1,   1,   1,   1,   1.0,   1.0 },
    {0.0, 0.8788424,   1,   1,   1,   1,   1,   1,   1.0,   1.0 },
    {0.0, 0.9302709,   1,   1,   1,   1,   1,   1,   1.0,   1.0 },
    {0.0, 0.9417593,   1,   1,   1,   1,   1,   1,   1.0,   1.0 },
    {0.0, 1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0,   1.0 }
};
/*+*/ const int num1[n] =                             //Количество коэфициентов в расчетах первого порядка каждого из компонентов
{
    36, 36, 32, 11, 0, 0, 0, 0, 0, 0
};
/*+*/ const double b_n[n][40] =                       //Коэффициенты единого уравнения состояния газа компонентов
{
    {
        0.04367901028, 0.67092361990, -1.76557785900, 0.85823302410, -1.20651305200, 0.51204672200, -0.00040000108, -0.01247842423, 0.03100269701, 0.00175474852, -0.00000317192, -0.00000224035, 0.00000029471,
        0.18304879090, 0.15118836790, -0.42893638770, 0.06894002446, -0.01408313996, -0.03063054830, -0.02969906708, -0.01932040831, -0.11057399590, 0.09952548995, 0.00854843783, -0.06150555662, -0.04291792423, -0.01813207290,
        0.03445904760, -0.00238591945, -0.01159094939, 0.06641693602, -0.02371549590, -0.03961624905, -0.01387292044, 0.03389489599, -0.00292737875, 0.00009324800, -6.28717151800, 12.71069467000, -6.42395346600
    },
    {
        0.04367901028, 0.67092361990, -1.76557785900, 0.85823302410, -1.20651305200, 0.51204672200, -0.00040000108, -0.01247842423, 0.03100269701, 0.00175474852, -0.00000317192, -0.00000224035, 0.00000029471,
        0.18304879090, 0.15118836790, -0.42893638770, 0.06894002446, -0.01408313996, -0.03063054830, -0.02969906708, -0.01932040831, -0.11057399590, 0.09952548995, 0.00854843783, -0.06150555662, -0.04291792423, -0.01813207290,
        0.03445904760, -0.00238591945, -0.01159094939, 0.06641693602, -0.02371549590, -0.03961624905, -0.01387292044, 0.03389489599, -0.00292737875, 0.00009324800, -6.28717151800, 12.71069467000, -6.42395346600
    },
    {
        0.46215430560, -1.92369363870, 0.39878604003, 0.01605453237, 0.12895242219,0.03545832049, 0.03492784454, -0.01130618338, -0.03980903278, 0.00083031937,
        0.00045921575, 0.00000017530, -0.00007091952, -0.23436162249, 0.08457469765, 0.14861052010, -0.10016857867, -0.05926482439, -0.04126351422, 0.02185516187,
        -0.00007455272, -0.00988590856, 0.00102084165, -0.00052189656, 0.00009859216, 0.04686514086, -0.01955801165, -0.04655716165, 0.00328779054, 0.13572090185,
        -0.10846471455, -0.00675028369, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0.04291005100, 1.73135710000, -2.45165240000, 0.34157466000, -0.46047898000, -0.66847295000, 0.20889705000, 0.19421381000, -0.22917851000,
        -0.60405866000, 0.06668065400, 0.01753461800, 0.33874242000, 0.22228777000, -0.23219062000, -0.09220694000, -0.47575718000, -0.01748682400,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
/*+*/ const double r_n[n][40] =
{
    {
        1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 8, 9, 10, 1, 1, 1, 2, 4, 5, 6, 1, 2, 3, 4, 4, 3, 5, 5, 8, 2, 3, 4, 4, 4, 5, 6, 2, 0, 0, 0
    },
    {
        1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 8, 9, 10, 1, 1, 1, 2, 4, 5, 6, 1, 2, 3, 4, 4, 3, 5, 5, 8, 2, 3, 4, 4, 4, 5, 6, 2, 0, 0, 0
    },
    {
        1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 7, 7, 8, 1, 1, 2, 2, 3, 3, 5, 6, 7, 8, 10, 2, 3, 3, 4, 4, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        4, 1, 1, 2, 2, 1, 3, 6, 6, 2, 3, 1, 1, 1, 2, 2, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }

};
/*+*/ const double t_n[n][40] =
{
    {
        -0.5, 0.5, 1, 0.5, 1, 1.5, 4.5, 0, 1, 3, 1, 3, 3, 0, 1, 2, 0, 0, 2, 2, 5, 5, 5, 2, 4, 12, 8, 10, 10, 10, 14, 12, 18, 22, 18, 14, 2, 0, 1, 2
    },
    {
        -0.5, 0.5, 1, 0.5, 1, 1.5, 4.5, 0, 1, 3, 1, 3, 3, 0, 1, 2, 0, 0, 2, 2, 5, 5, 5, 2, 4, 12, 8, 10, 10, 10, 14, 12, 18, 22, 18, 14, 2, 0, 1, 2
    },
    {
        0, 1.5, 2.5, -0.5, 1.5, 2, 0, 1, 2.5, 0, 2, 5, 2, 5, 6, 3.5, 5.5, 3, 7, 6, 8.5, 4, 6.5, 5.5, 22, 11, 18, 11, 23, 17, 18, 23, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        1, 0.33, 0.8, 0.43, 0.9, 2.46, 2.09, 0.88, 1.09, 3.25, 4.62, 0.76, 2.5, 2.75, 3.05, 2.55, 8.4, 6.75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
/*+*/ const double g_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
/*+*/ const double l_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
};
/*+*/ const double alpha_n[n][7] =
{
    {
        -20, -40, -40, -40, 0, 0, 0
    },
    {
        20, 40, 40, 40, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        0.963, 1.977, 1.917, 2.307, 2.546, 3.28, 14.6
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    }
};
/*+*/ const double betta_n[n][7] =
{
    {
        -200, -250, -250, -250, 0, 0, 0
    },
    {
        200, 250, 250, 250, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        2.33, 3.47, 3.15, 3.19, 0.92, 18.8, 547.8
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
};
/*+*/ const double eps_n[n][7] =
{
    {
        1, 1, 1, 1, 0, 0, 0
    },
    {
        1, 1, 1, 1, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        1.283, 0.6936, 0.788, 0.473, 0.8577, 0.271, 0.948
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    }
};
/*+*/ const double gamma_n[n][7] =
{
    {
        1.07, 1.11, 1.11, 1.11, 0, 0, 0
    },
    {
        1.07, 1.11, 1.11, 1.11, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0
    },
    {
        0.684, 0.829, 1.419, 0.817, 1.5, 1.426, 1.093
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    },
    {
        0, 0, 0, 0, 0, 0 ,0
    }
};
/*+*/ const double R[n] =
{
    8.314472, 0.5182705, 0.2765052, 0.188549, 0, 0, 0, 0, 0, 0
};
/*+*/ const double ro_c[n][7][5] =                    //Плотность компонентов от P и T
{
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {438.94, 424.79, 1.655,  1.5182, 1.4034},
        /*0.5*/ {439.24, 425.15, 410.25, 394.22, 7.6355},
        /*1.0*/ {439.62, 425.61, 410.8,  394.92, 377.51},
        /*2.0*/ {440.37, 426.5,	 411.88, 396.27, 379.27},
        /*3.0*/ {441.11, 427.38, 412.94, 397.58, 380.95},
        /*4.0*/ {441.84, 428.24, 413.98, 398.86, 382.57},
        /*5.0*/ {442.55, 429.09, 415.0,  400.1,  384.13}
    },
    {
        //100    110     120     130     140
        /*0.1*/ {641.27, 630.38, 619.35, 608.22, 596.96},
        /*0.5*/ {641.43, 630.55, 619.54, 608.43, 597.19},
        /*1.0*/ {641.62, 630.76, 619.78, 608.69, 597.48},
        /*2.0*/ {642.01, 631.19, 620.25, 609.21, 598.06},
        /*3.0*/ {642.39, 631.61, 620.71, 609.73, 598.63},
        /*4.0*/ {642.77, 632.03, 621.17, 610.24, 599.2},
        /*5.0*/ {643.15, 632.45, 621.64, 610.75, 599.77}},
    {
        //100    110     120     130     140
        /*0.1*/ {719.39, 709.09, 698.85, 688.66, 678.5},
        /*0.5*/ {719.52, 709.24, 699.01, 688.84, 678.5},
        /*1.0*/ {719.7,  709.43, 699.22, 689.06, 678.94},
        /*2.0*/ {720.04, 709.8,  699.62, 689.5,	 679.41},
        /*3.0*/ {720.39, 710.18, 700.02, 689.93, 679.89},
        /*4.0*/ {720.73, 710.55, 700.42, 690.37, 680.36},
        /*5.0*/ {721.07, 710.92, 700.82, 690.8,  680.83}
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0, 734.46, 725.02, 715.57},
        /*0.5*/ {0, 0, 734.61, 725.18, 715.75},
        /*1.0*/ {0, 0, 734.80, 725.39, 715.97},
        /*2.0*/ {0, 0, 735.18, 725.80, 716.42},
        /*3.0*/ {0, 0, 735.55, 726.21, 716.86},
        /*4.0*/ {0, 0, 735.93, 726.62, 717.31},
        /*5.0*/ {0, 0, 736.30, 727.03, 717.75},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0, 0, 0, 730.24},
        /*0.5*/ {0, 0, 0, 0, 730.41},
        /*1.0*/ {0, 0, 0, 0, 730.62},
        /*2.0*/ {0, 0, 0, 0, 731.04},
        /*3.0*/ {0, 0, 0, 0, 731.46},
        /*4.0*/ {0, 0, 0, 0, 713.88},
        /*5.0*/ {0, 0, 0, 0, 732.30},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {0, 0 ,0 ,0 ,0},
        /*0.5*/ {0, 0 ,0 ,0 ,0},
        /*1.0*/ {0, 0 ,0 ,0 ,0},
        /*2.0*/ {0, 0 ,0 ,0 ,0},
        /*3.0*/ {0, 0 ,0 ,0 ,0},
        /*4.0*/ {0, 0 ,0 ,0 ,0},
        /*5.0*/ {0, 0 ,0 ,0 ,0},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {3.437, 3.109, 2.841, 2.616, 2.424},
        /*0.5*/ {18.88, 16.62, 14.93, 13.59, 12.50},
        /*1.0*/ {689.6, 36.97, 32.11, 28.67, 26.02},
        /*2.0*/ {695.8, 627.5, 79.53, 65.46, 57.11},
        /*3.0*/ {701.5, 638.0, 541.1, 120.9, 96.36},
        /*4.0*/ {706.7, 647.0, 565.1, 299.0, 151.0},
        /*5.0*/ {711.6, 654.9, 582.1, 459.3, 236.2},
    },
    {
        //100    110     120     130     140
        /*0.1*/ {1560.0, 1560.0, 1560.0, 1560.0, 1560.0},
        /*0.5*/ {1560.0, 1560.0, 1560.0, 1560.0, 1560.0},
        /*1.0*/ {1560.0, 1560.0, 1560.0, 1560.0, 1560.0},
        /*2.0*/ {1560.0, 1560.0, 1560.0, 1560.0, 1560.0},
        /*3.0*/ {1560.0, 1560.0, 1560.0, 1560.0, 1560.0},
        /*4.0*/ {1560.0, 1560.0, 1560.0, 1560.0, 1560.0},
        /*5.0*/ {1560.0, 1560.0, 1560.0, 1560.0, 1560.0},
    },

    // 0 - LNG 
    // 1 - Methane +
    // 2 - Ethane +
    // 3 - Propane +
    // 4 - Iso-buthan
    // 5 - N-buthan
    // 6 - Iso-penthane
    // 7 - N-penthane
    // 8 - Nitrogen +
    // 9 - Carbon dioxide +
};
/*+*/ const double P_lin[7] =                         //Линеные коэффициенты для расчета экстраполяции плотности компонентов
{
    0.1, 0.5, 1.0, 2.0, 3.0, 4.0, 5.0
};
/*+*/ const double T_lin[5] =                         //Линеные коэффициенты для расчета экстраполяции плотности компонентов
{
    100, 110, 120, 130, 140
};

/*+*/ const double alpha_i[n][11] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        146.696186, -125.151799, 73.6090931, -29.1295894, 8.00144126, -1.53956591, 0.206391316, -0.018854336, 0.001117579, -3.87107E-05, 5.94264E-07
    },
    {
        68.120976, -30.634058, 9.5275029, -1.6947102, 0.17630585, -0.00995454, 0.000235364, 0, 0, 0, 0
    },
    {
        -4.970583, 4.29352, 3, 3.043, 5.874, 9.337, 7.922, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
};
/*+*/ const double betta_i[n][6] =
{
    {
        0, 0, 0, 0, 0, 0
    },
    {
        -109.797092, 56.9812103, -19.6097803, 4.27956524, -0.53518684, 0.02916351
    },
    {
        -87.407084, 78.481374, -44.865859, 14.654346, -2.0518393, 0
    },
    {
        1.062478, 3.344237, 5.363757, 11.762957, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0
    }
};
//Параметры для расчета динамической вязкости и коэффициента теплопроводности
/*+*/ const double ci[n][15] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        33.1650192, -103.113734, 136.53861, -76.8431692, 13.226332, 17.8427316, -14.2588266, -16.3377114, 20.6377453, 9.72429201, -11.1571722, -1.15075263, 1.08893802, -0.556375923, 0.361567397
    },
    {
        11.1936211, -7.219149, 1.88028517, 5.38878135, 9.58450942, -5.65329767, -11.2092877, 5.5656977, 1.33824877, -0.605721718, 2.68317101, -0.36148346, 0, 0, 0
    },
    {
        -0.784758448, 1.76354031, -0.269694393, -0.402359278, 1.08475218, -0.605967615, 0.561917556, -0.495818159,
        -0.271260217, 0.185501572, 0.042452813, 0.055215535, -0.033644481, -0.003987157, -8.04267E-06
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
/*+*/ const double ri[n][15] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 5, 5, 5
    },
    {
        1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 0, 0, 0
    },
    {
        1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
/*+*/ const double ti[n][15] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        -1, -2, -3, -4, -5, -1, -2, -4, -5, -4, -5, -1, -1, -2, -5
    },
    {
        0, 1, 0, 5, 1, 5, 2, 3, 5, 0, 1, 4
    },
    {
        0, 1, 2, 4, 0, 1, 4, 0, 4, 0, 1, 4, 0, 4, 5
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};

double a[6][n] =
{
    {0, 0,  -0.05499404, -0.10338020, -0.14462010, -0.13305690, -0.13449640, -0.15002470, -0.01106580, 0},
    {0, 0,  0.07132088,  0.12564330,  0.16915340,  0.15150160,  0.17577780,  0.17651880,  0.01395339,  0},
    {0, 0,  0.03411748,  0.05515581,  0.07255968,  0.06703781,  0.07751344,  0.08076395,  0.01517371,  0},
    {0, 0,  0.34638440,  0.38770780,  0.38432760,  0.31016800,  0.41603340,  0.08076395,  0.04907672,  0},
    {0, 0,  -0.17569870, -0.18687000, -0.17787660, -0.14282830, -0.19889250, -0.17892410, -0.02492141, 0},
    {0, 0,  0.01181235,  0.05099110,  0.07948337,  0.10225430,  0.09967660,  0.12069110,  0.00707627,  0}
};
double b[n][5] =
{
    {0, 0, 0, 0, 0},
    {3.98591747,    0.0944817883000,      -0.1840595180000,     0.1216708830000,        0.0000000000000},
    {4.04494534,    -2.8873841400000,     20.4420998000000,     -36.3289167000000,      24.1231231000000},
    {3.59984779,    -4.1471346100000,     20.4420998000000,     -163.4697800000000,     24.1231231000000},
    {3.27383299,    -4.4900973500000,     114.5875460000000,    -290.1751690000000,     249.5082740000000},
    {1.10821140,    26.7646665000000,     18.9823524000000,     -194.6364480000000,     240.7493630000000},
    {10.19055880,   -104.6602030000000,   18.9823524000000,     -1150.4802200000000,    81.3417350000000},
    {1.30150258,    7.4279840500000,      241.1519530000000,    -857.0218310000000,     901.4662090000000},
    {3.50000066,    0.0003858466241,      0.0000744623688,      0.0000000000000,        0.0000000000000},
    {3.26743307,    3.04166057,           -14.4322345000000,    28.2801767000000,       -17.1064968000000}
};
double Cp0r = 0;


//Результатные массивы
//Надо подписать где что
double M[n] =
{
     0, 16.0428, 30.06904, 44.09562, 58.1222, 58.1222, 72.1503, 72.1503, 28.01348, 44.0098
};
double fi_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double X_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double U_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double Y_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double Q_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A0_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A1_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A2_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A3_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A4_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A5_n[n][40] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    }
};
double A0[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A1[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A2[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A3[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A4[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double A5[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};


double etta[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double lyam[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double h[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double s[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double cp[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double cv[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double w_ij[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double w[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double tau[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
double ro[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

//Данные трубы
//Количество диаметров
double k_d = 22;                 
//Внешние диаметры трубопроводов
double D[22] =                            
{
    0.114, 0.121, 0.133, 0.146, 0.152, 0.159, 0.168, 0.178, 0.219, 0.245, 0.273,
    0.325, 0.356, 0.377, 0.426, 0.53, 0.63, 0.72, 0.82, 1.02, 1.22, 1.42
};
//Толщины стенок для трубрпроводов
double delta_d[22] =                      
{
    0.006, 0.006, 0.006, 0.006, 0.006, 0.006, 0.008, 0.008, 0.008, 0.008, 0.008,
    0.008, 0.01, 0.01, 0.01, 0.01, 0.012, 0.012, 0.014, 0.018, 0.018, 0.02
};
//Внутренние диаметры трубопроводов
double d[22] =                            
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
//Данные изоляции
int k_iz = 8;

double h_iz[22][8] =
{
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
};
double lyam_iz[22][8] =
{
        {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
    {
        0, 0, 0, 0, 0, 0, 0, 0
    },
};


//Вводимые параметры СПГ
//Молярные доли компонентов
double x[n] =                                   
{
    100, 95.0, 4.5, 0.5, 0, 0, 0, 0, 0, 0
    //89.782, 4.552, 0.414, 0.0001, 0.144, 0.0001, 0.119, 4.984, 0.0048
};
double md[n] =
{
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
//Начальные давление и температура смеси и компонентов
       //+      +                    +              +
double p = 2, T = 100, T_f = 110, p_np = 0.0, V = 145000.0, t_tr = 24.0;                        

//Параметры трубы
const double k_e = 0.01;
//Параметры воды
double ro_w = 1000, cp_w = 4212, lyam_w = 0.561, T_w = 269.15;
//
double x_tr = 0.0, delta_x = 25.0, h_tr = 0;


namespace LNGCPP 
{

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
    using namespace System::Data::OleDb;
	using namespace System::Drawing;
    using namespace System::IO;
    using namespace Microsoft::Office::Interop;
    //using namespace Microsoft::Office::Core;
    //using namespace Microsoft::Office::Interop::Excel;
    using namespace System::Text::RegularExpressions;
    
    //using namespace Microsoft::Office::Core;
    
    //using namespace Microsoft::Office::Interop;
    //#define Excel   Microsoft::Office::Interop::Excel
    //using namespace Microsoft::Office::Interop::Excel::Application;

	/// <summary>
	/// Сводка для MyForm
	/// </summary>
	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::TabControl^ tabControl1;
	protected:
	private: System::Windows::Forms::TabPage^ tabPage1;
	private: System::Windows::Forms::GroupBox^ groupBox1;
	private: System::Windows::Forms::Button^ button1;
	private: System::Windows::Forms::TabPage^ tabPage2;
    private: System::Windows::Forms::Label^ label9;
    private: System::Windows::Forms::TextBox^ textBox9;
    private: System::Windows::Forms::Label^ label8;
    private: System::Windows::Forms::TextBox^ textBox8;
    private: System::Windows::Forms::Label^ label7;
    private: System::Windows::Forms::TextBox^ textBox7;
    private: System::Windows::Forms::Label^ label6;
    private: System::Windows::Forms::TextBox^ textBox6;
    private: System::Windows::Forms::Label^ label5;
    private: System::Windows::Forms::TextBox^ textBox5;
    private: System::Windows::Forms::Label^ label4;
    private: System::Windows::Forms::TextBox^ textBox4;
    private: System::Windows::Forms::Label^ label3;
    private: System::Windows::Forms::TextBox^ textBox3;
    private: System::Windows::Forms::Label^ label2;
    private: System::Windows::Forms::TextBox^ textBox2;
    private: System::Windows::Forms::Label^ label1;
    private: System::Windows::Forms::TextBox^ textBox1;
    private: System::Windows::Forms::GroupBox^ groupBox2;
    private: System::Windows::Forms::Label^ label12;
    private: System::Windows::Forms::TextBox^ textBox12;
    private: System::Windows::Forms::Label^ label11;
    private: System::Windows::Forms::TextBox^ textBox11;
    private: System::Windows::Forms::Label^ label10;
    private: System::Windows::Forms::Button^ button2;
    private: System::Windows::Forms::TextBox^ textBox10;
    private: System::Windows::Forms::Label^ label14;
    private: System::Windows::Forms::TextBox^ textBox14;
    private: System::Windows::Forms::Label^ label13;
    private: System::Windows::Forms::TextBox^ textBox13;
    private: System::Windows::Forms::GroupBox^ groupBox3;
    private: System::Windows::Forms::Label^ label15;
    private: System::Windows::Forms::TextBox^ textBox15;
    private: System::Windows::Forms::Label^ label16;
    private: System::Windows::Forms::TextBox^ textBox16;
    private: System::Windows::Forms::Button^ button3;
    private: System::Windows::Forms::Label^ label18;
    private: System::Windows::Forms::TextBox^ textBox18;
    private: System::Windows::Forms::Label^ label17;
    private: System::Windows::Forms::TextBox^ textBox17;
    private: System::Windows::Forms::GroupBox^ groupBox4;
    private: System::Windows::Forms::Button^ button4;
    private: System::Windows::Forms::DataGridView^ dataGridView1;
    private: System::Windows::Forms::Button^ button5;
    private: System::Windows::Forms::DataGridView^ dataGridView2;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column1;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column2;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column3;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column4;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column5;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column6;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column7;
    private: System::Windows::Forms::DataGridViewTextBoxColumn^ Column8;









	private:
		/// <summary>
		/// Обязательная переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Требуемый метод для поддержки конструктора — не изменяйте 
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
            System::Windows::Forms::DataGridViewCellStyle^ dataGridViewCellStyle1 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
            System::Windows::Forms::DataGridViewCellStyle^ dataGridViewCellStyle2 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
            System::Windows::Forms::DataGridViewCellStyle^ dataGridViewCellStyle3 = (gcnew System::Windows::Forms::DataGridViewCellStyle());
            this->tabControl1 = (gcnew System::Windows::Forms::TabControl());
            this->tabPage1 = (gcnew System::Windows::Forms::TabPage());
            this->groupBox4 = (gcnew System::Windows::Forms::GroupBox());
            this->button4 = (gcnew System::Windows::Forms::Button());
            this->dataGridView1 = (gcnew System::Windows::Forms::DataGridView());
            this->groupBox3 = (gcnew System::Windows::Forms::GroupBox());
            this->button3 = (gcnew System::Windows::Forms::Button());
            this->label18 = (gcnew System::Windows::Forms::Label());
            this->textBox18 = (gcnew System::Windows::Forms::TextBox());
            this->label17 = (gcnew System::Windows::Forms::Label());
            this->textBox17 = (gcnew System::Windows::Forms::TextBox());
            this->label16 = (gcnew System::Windows::Forms::Label());
            this->textBox16 = (gcnew System::Windows::Forms::TextBox());
            this->label15 = (gcnew System::Windows::Forms::Label());
            this->textBox15 = (gcnew System::Windows::Forms::TextBox());
            this->groupBox2 = (gcnew System::Windows::Forms::GroupBox());
            this->label14 = (gcnew System::Windows::Forms::Label());
            this->textBox14 = (gcnew System::Windows::Forms::TextBox());
            this->label13 = (gcnew System::Windows::Forms::Label());
            this->textBox13 = (gcnew System::Windows::Forms::TextBox());
            this->label12 = (gcnew System::Windows::Forms::Label());
            this->textBox12 = (gcnew System::Windows::Forms::TextBox());
            this->label11 = (gcnew System::Windows::Forms::Label());
            this->textBox11 = (gcnew System::Windows::Forms::TextBox());
            this->label10 = (gcnew System::Windows::Forms::Label());
            this->button2 = (gcnew System::Windows::Forms::Button());
            this->textBox10 = (gcnew System::Windows::Forms::TextBox());
            this->groupBox1 = (gcnew System::Windows::Forms::GroupBox());
            this->label9 = (gcnew System::Windows::Forms::Label());
            this->textBox9 = (gcnew System::Windows::Forms::TextBox());
            this->label8 = (gcnew System::Windows::Forms::Label());
            this->textBox8 = (gcnew System::Windows::Forms::TextBox());
            this->label7 = (gcnew System::Windows::Forms::Label());
            this->textBox7 = (gcnew System::Windows::Forms::TextBox());
            this->label6 = (gcnew System::Windows::Forms::Label());
            this->textBox6 = (gcnew System::Windows::Forms::TextBox());
            this->label5 = (gcnew System::Windows::Forms::Label());
            this->textBox5 = (gcnew System::Windows::Forms::TextBox());
            this->label4 = (gcnew System::Windows::Forms::Label());
            this->textBox4 = (gcnew System::Windows::Forms::TextBox());
            this->label3 = (gcnew System::Windows::Forms::Label());
            this->textBox3 = (gcnew System::Windows::Forms::TextBox());
            this->label2 = (gcnew System::Windows::Forms::Label());
            this->textBox2 = (gcnew System::Windows::Forms::TextBox());
            this->label1 = (gcnew System::Windows::Forms::Label());
            this->textBox1 = (gcnew System::Windows::Forms::TextBox());
            this->button1 = (gcnew System::Windows::Forms::Button());
            this->tabPage2 = (gcnew System::Windows::Forms::TabPage());
            this->dataGridView2 = (gcnew System::Windows::Forms::DataGridView());
            this->button5 = (gcnew System::Windows::Forms::Button());
            this->Column1 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->Column2 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->Column3 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->Column4 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->Column5 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->Column6 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->Column7 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->Column8 = (gcnew System::Windows::Forms::DataGridViewTextBoxColumn());
            this->tabControl1->SuspendLayout();
            this->tabPage1->SuspendLayout();
            this->groupBox4->SuspendLayout();
            (cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->dataGridView1))->BeginInit();
            this->groupBox3->SuspendLayout();
            this->groupBox2->SuspendLayout();
            this->groupBox1->SuspendLayout();
            this->tabPage2->SuspendLayout();
            (cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->dataGridView2))->BeginInit();
            this->SuspendLayout();
            // 
            // tabControl1
            // 
            this->tabControl1->Controls->Add(this->tabPage1);
            this->tabControl1->Controls->Add(this->tabPage2);
            this->tabControl1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9.75F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point,
                static_cast<System::Byte>(204)));
            this->tabControl1->Location = System::Drawing::Point(-4, 0);
            this->tabControl1->Name = L"tabControl1";
            this->tabControl1->SelectedIndex = 0;
            this->tabControl1->Size = System::Drawing::Size(796, 669);
            this->tabControl1->TabIndex = 0;
            // 
            // tabPage1
            // 
            this->tabPage1->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)), static_cast<System::Int32>(static_cast<System::Byte>(47)),
                static_cast<System::Int32>(static_cast<System::Byte>(48)));
            this->tabPage1->Controls->Add(this->groupBox4);
            this->tabPage1->Controls->Add(this->groupBox3);
            this->tabPage1->Controls->Add(this->groupBox2);
            this->tabPage1->Controls->Add(this->groupBox1);
            this->tabPage1->Location = System::Drawing::Point(4, 25);
            this->tabPage1->Name = L"tabPage1";
            this->tabPage1->Padding = System::Windows::Forms::Padding(3);
            this->tabPage1->Size = System::Drawing::Size(788, 640);
            this->tabPage1->TabIndex = 0;
            this->tabPage1->Text = L"Input data";
            // 
            // groupBox4
            // 
            this->groupBox4->Controls->Add(this->button4);
            this->groupBox4->Controls->Add(this->dataGridView1);
            this->groupBox4->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->groupBox4->Location = System::Drawing::Point(250, 6);
            this->groupBox4->Name = L"groupBox4";
            this->groupBox4->Size = System::Drawing::Size(530, 582);
            this->groupBox4->TabIndex = 3;
            this->groupBox4->TabStop = false;
            this->groupBox4->Text = L"Main parameters of pipeline";
            // 
            // button4
            // 
            this->button4->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
            this->button4->Location = System::Drawing::Point(7, 538);
            this->button4->Name = L"button4";
            this->button4->RightToLeft = System::Windows::Forms::RightToLeft::No;
            this->button4->Size = System::Drawing::Size(515, 36);
            this->button4->TabIndex = 14;
            this->button4->Text = L"Input";
            this->button4->UseVisualStyleBackColor = true;
            this->button4->Click += gcnew System::EventHandler(this, &MyForm::button4_Click);
            // 
            // dataGridView1
            // 
            this->dataGridView1->BackgroundColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)),
                static_cast<System::Int32>(static_cast<System::Byte>(47)), static_cast<System::Int32>(static_cast<System::Byte>(48)));
            this->dataGridView1->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
            dataGridViewCellStyle1->Alignment = System::Windows::Forms::DataGridViewContentAlignment::MiddleLeft;
            dataGridViewCellStyle1->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)), static_cast<System::Int32>(static_cast<System::Byte>(47)),
                static_cast<System::Int32>(static_cast<System::Byte>(48)));
            dataGridViewCellStyle1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9.75F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point,
                static_cast<System::Byte>(204)));
            dataGridViewCellStyle1->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)));
            dataGridViewCellStyle1->SelectionBackColor = System::Drawing::SystemColors::Highlight;
            dataGridViewCellStyle1->SelectionForeColor = System::Drawing::SystemColors::HighlightText;
            dataGridViewCellStyle1->WrapMode = System::Windows::Forms::DataGridViewTriState::False;
            this->dataGridView1->DefaultCellStyle = dataGridViewCellStyle1;
            this->dataGridView1->GridColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->dataGridView1->Location = System::Drawing::Point(7, 23);
            this->dataGridView1->Name = L"dataGridView1";
            this->dataGridView1->Size = System::Drawing::Size(516, 510);
            this->dataGridView1->TabIndex = 0;
            // 
            // groupBox3
            // 
            this->groupBox3->Controls->Add(this->button3);
            this->groupBox3->Controls->Add(this->label18);
            this->groupBox3->Controls->Add(this->textBox18);
            this->groupBox3->Controls->Add(this->label17);
            this->groupBox3->Controls->Add(this->textBox17);
            this->groupBox3->Controls->Add(this->label16);
            this->groupBox3->Controls->Add(this->textBox16);
            this->groupBox3->Controls->Add(this->label15);
            this->groupBox3->Controls->Add(this->textBox15);
            this->groupBox3->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->groupBox3->Location = System::Drawing::Point(6, 439);
            this->groupBox3->Name = L"groupBox3";
            this->groupBox3->Size = System::Drawing::Size(238, 149);
            this->groupBox3->TabIndex = 2;
            this->groupBox3->TabStop = false;
            this->groupBox3->Text = L"Main parameters of water";
            // 
            // button3
            // 
            this->button3->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
            this->button3->Location = System::Drawing::Point(6, 105);
            this->button3->Name = L"button3";
            this->button3->RightToLeft = System::Windows::Forms::RightToLeft::No;
            this->button3->Size = System::Drawing::Size(227, 36);
            this->button3->TabIndex = 13;
            this->button3->Text = L"Input";
            this->button3->UseVisualStyleBackColor = true;
            this->button3->Click += gcnew System::EventHandler(this, &MyForm::button3_Click);
            // 
            // label18
            // 
            this->label18->AutoSize = true;
            this->label18->Location = System::Drawing::Point(128, 84);
            this->label18->Name = L"label18";
            this->label18->Size = System::Drawing::Size(40, 16);
            this->label18->TabIndex = 11;
            this->label18->Text = L"T (K)";
            // 
            // textBox18
            // 
            this->textBox18->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox18->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox18->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox18->Location = System::Drawing::Point(7, 84);
            this->textBox18->Name = L"textBox18";
            this->textBox18->Size = System::Drawing::Size(115, 15);
            this->textBox18->TabIndex = 12;
            this->textBox18->Text = L"269,15";
            this->textBox18->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label17
            // 
            this->label17->AutoSize = true;
            this->label17->Location = System::Drawing::Point(127, 63);
            this->label17->Name = L"label17";
            this->label17->Size = System::Drawing::Size(72, 16);
            this->label17->TabIndex = 9;
            this->label17->Text = L"λ (kg/m3)";
            // 
            // textBox17
            // 
            this->textBox17->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox17->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox17->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox17->Location = System::Drawing::Point(6, 63);
            this->textBox17->Name = L"textBox17";
            this->textBox17->Size = System::Drawing::Size(115, 15);
            this->textBox17->TabIndex = 10;
            this->textBox17->Text = L"0,561";
            this->textBox17->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label16
            // 
            this->label16->AutoSize = true;
            this->label16->Location = System::Drawing::Point(127, 42);
            this->label16->Name = L"label16";
            this->label16->Size = System::Drawing::Size(95, 16);
            this->label16->TabIndex = 7;
            this->label16->Text = L"Cp (J/[kg*K])";
            // 
            // textBox16
            // 
            this->textBox16->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox16->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox16->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox16->Location = System::Drawing::Point(6, 42);
            this->textBox16->Name = L"textBox16";
            this->textBox16->Size = System::Drawing::Size(115, 15);
            this->textBox16->TabIndex = 8;
            this->textBox16->Text = L"4212";
            this->textBox16->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label15
            // 
            this->label15->AutoSize = true;
            this->label15->Location = System::Drawing::Point(127, 21);
            this->label15->Name = L"label15";
            this->label15->Size = System::Drawing::Size(72, 16);
            this->label15->TabIndex = 5;
            this->label15->Text = L"ρ (kg/m3)";
            // 
            // textBox15
            // 
            this->textBox15->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox15->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox15->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox15->Location = System::Drawing::Point(6, 21);
            this->textBox15->Name = L"textBox15";
            this->textBox15->Size = System::Drawing::Size(115, 15);
            this->textBox15->TabIndex = 6;
            this->textBox15->Text = L"1030";
            this->textBox15->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // groupBox2
            // 
            this->groupBox2->Controls->Add(this->label14);
            this->groupBox2->Controls->Add(this->textBox14);
            this->groupBox2->Controls->Add(this->label13);
            this->groupBox2->Controls->Add(this->textBox13);
            this->groupBox2->Controls->Add(this->label12);
            this->groupBox2->Controls->Add(this->textBox12);
            this->groupBox2->Controls->Add(this->label11);
            this->groupBox2->Controls->Add(this->textBox11);
            this->groupBox2->Controls->Add(this->label10);
            this->groupBox2->Controls->Add(this->button2);
            this->groupBox2->Controls->Add(this->textBox10);
            this->groupBox2->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->groupBox2->Location = System::Drawing::Point(6, 264);
            this->groupBox2->Name = L"groupBox2";
            this->groupBox2->Size = System::Drawing::Size(238, 169);
            this->groupBox2->TabIndex = 1;
            this->groupBox2->TabStop = false;
            this->groupBox2->Text = L"Main parameters of LNG";
            // 
            // label14
            // 
            this->label14->AutoSize = true;
            this->label14->Location = System::Drawing::Point(124, 105);
            this->label14->Name = L"label14";
            this->label14->Size = System::Drawing::Size(41, 16);
            this->label14->TabIndex = 11;
            this->label14->Text = L"t0 (h)";
            // 
            // textBox14
            // 
            this->textBox14->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox14->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox14->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox14->Location = System::Drawing::Point(6, 105);
            this->textBox14->Name = L"textBox14";
            this->textBox14->Size = System::Drawing::Size(115, 15);
            this->textBox14->TabIndex = 12;
            this->textBox14->Text = L"24";
            this->textBox14->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label13
            // 
            this->label13->AutoSize = true;
            this->label13->Location = System::Drawing::Point(125, 84);
            this->label13->Name = L"label13";
            this->label13->Size = System::Drawing::Size(59, 16);
            this->label13->TabIndex = 9;
            this->label13->Text = L"V0 (m3)";
            // 
            // textBox13
            // 
            this->textBox13->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox13->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox13->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox13->Location = System::Drawing::Point(7, 84);
            this->textBox13->Name = L"textBox13";
            this->textBox13->Size = System::Drawing::Size(115, 15);
            this->textBox13->TabIndex = 10;
            this->textBox13->Text = L"145000";
            this->textBox13->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label12
            // 
            this->label12->AutoSize = true;
            this->label12->Location = System::Drawing::Point(125, 63);
            this->label12->Name = L"label12";
            this->label12->Size = System::Drawing::Size(44, 16);
            this->label12->TabIndex = 7;
            this->label12->Text = L"Tf (K)";
            // 
            // textBox12
            // 
            this->textBox12->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox12->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox12->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox12->Location = System::Drawing::Point(7, 63);
            this->textBox12->Name = L"textBox12";
            this->textBox12->Size = System::Drawing::Size(115, 15);
            this->textBox12->TabIndex = 8;
            this->textBox12->Text = L"110";
            this->textBox12->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label11
            // 
            this->label11->AutoSize = true;
            this->label11->Location = System::Drawing::Point(124, 42);
            this->label11->Name = L"label11";
            this->label11->Size = System::Drawing::Size(48, 16);
            this->label11->TabIndex = 5;
            this->label11->Text = L"T0 (K)";
            // 
            // textBox11
            // 
            this->textBox11->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox11->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox11->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox11->Location = System::Drawing::Point(6, 42);
            this->textBox11->Name = L"textBox11";
            this->textBox11->Size = System::Drawing::Size(115, 15);
            this->textBox11->TabIndex = 6;
            this->textBox11->Text = L"100";
            this->textBox11->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label10
            // 
            this->label10->AutoSize = true;
            this->label10->Location = System::Drawing::Point(124, 21);
            this->label10->Name = L"label10";
            this->label10->Size = System::Drawing::Size(69, 16);
            this->label10->TabIndex = 3;
            this->label10->Text = L"p0 (MPa)";
            // 
            // button2
            // 
            this->button2->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
            this->button2->Location = System::Drawing::Point(6, 126);
            this->button2->Name = L"button2";
            this->button2->RightToLeft = System::Windows::Forms::RightToLeft::No;
            this->button2->Size = System::Drawing::Size(227, 36);
            this->button2->TabIndex = 2;
            this->button2->Text = L"Input";
            this->button2->UseVisualStyleBackColor = true;
            this->button2->Click += gcnew System::EventHandler(this, &MyForm::button2_Click);
            // 
            // textBox10
            // 
            this->textBox10->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox10->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox10->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox10->Location = System::Drawing::Point(6, 21);
            this->textBox10->Name = L"textBox10";
            this->textBox10->Size = System::Drawing::Size(115, 15);
            this->textBox10->TabIndex = 4;
            this->textBox10->Text = L"2,0";
            this->textBox10->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // groupBox1
            // 
            this->groupBox1->Controls->Add(this->label9);
            this->groupBox1->Controls->Add(this->textBox9);
            this->groupBox1->Controls->Add(this->label8);
            this->groupBox1->Controls->Add(this->textBox8);
            this->groupBox1->Controls->Add(this->label7);
            this->groupBox1->Controls->Add(this->textBox7);
            this->groupBox1->Controls->Add(this->label6);
            this->groupBox1->Controls->Add(this->textBox6);
            this->groupBox1->Controls->Add(this->label5);
            this->groupBox1->Controls->Add(this->textBox5);
            this->groupBox1->Controls->Add(this->label4);
            this->groupBox1->Controls->Add(this->textBox4);
            this->groupBox1->Controls->Add(this->label3);
            this->groupBox1->Controls->Add(this->textBox3);
            this->groupBox1->Controls->Add(this->label2);
            this->groupBox1->Controls->Add(this->textBox2);
            this->groupBox1->Controls->Add(this->label1);
            this->groupBox1->Controls->Add(this->textBox1);
            this->groupBox1->Controls->Add(this->button1);
            this->groupBox1->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->groupBox1->Location = System::Drawing::Point(6, 6);
            this->groupBox1->Name = L"groupBox1";
            this->groupBox1->Size = System::Drawing::Size(240, 252);
            this->groupBox1->TabIndex = 0;
            this->groupBox1->TabStop = false;
            this->groupBox1->Text = L"Component composition of LNG";
            // 
            // label9
            // 
            this->label9->AutoSize = true;
            this->label9->Location = System::Drawing::Point(125, 189);
            this->label9->Name = L"label9";
            this->label9->Size = System::Drawing::Size(112, 16);
            this->label9->TabIndex = 17;
            this->label9->Text = L"Carbon dioxide";
            // 
            // textBox9
            // 
            this->textBox9->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox9->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox9->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox9->Location = System::Drawing::Point(7, 189);
            this->textBox9->Name = L"textBox9";
            this->textBox9->Size = System::Drawing::Size(115, 15);
            this->textBox9->TabIndex = 18;
            this->textBox9->Text = L"0";
            this->textBox9->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label8
            // 
            this->label8->AutoSize = true;
            this->label8->Location = System::Drawing::Point(125, 168);
            this->label8->Name = L"label8";
            this->label8->Size = System::Drawing::Size(66, 16);
            this->label8->TabIndex = 15;
            this->label8->Text = L"Nitrogen";
            // 
            // textBox8
            // 
            this->textBox8->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox8->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox8->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox8->Location = System::Drawing::Point(7, 168);
            this->textBox8->Name = L"textBox8";
            this->textBox8->Size = System::Drawing::Size(115, 15);
            this->textBox8->TabIndex = 16;
            this->textBox8->Text = L"0";
            this->textBox8->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label7
            // 
            this->label7->AutoSize = true;
            this->label7->Location = System::Drawing::Point(125, 147);
            this->label7->Name = L"label7";
            this->label7->Size = System::Drawing::Size(77, 16);
            this->label7->TabIndex = 13;
            this->label7->Text = L"n-Pentane";
            // 
            // textBox7
            // 
            this->textBox7->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox7->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox7->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox7->Location = System::Drawing::Point(7, 147);
            this->textBox7->Name = L"textBox7";
            this->textBox7->Size = System::Drawing::Size(115, 15);
            this->textBox7->TabIndex = 14;
            this->textBox7->Text = L"0";
            this->textBox7->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label6
            // 
            this->label6->AutoSize = true;
            this->label6->Location = System::Drawing::Point(125, 126);
            this->label6->Name = L"label6";
            this->label6->Size = System::Drawing::Size(84, 16);
            this->label6->TabIndex = 11;
            this->label6->Text = L"Isopentane";
            // 
            // textBox6
            // 
            this->textBox6->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox6->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox6->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox6->Location = System::Drawing::Point(7, 126);
            this->textBox6->Name = L"textBox6";
            this->textBox6->Size = System::Drawing::Size(115, 15);
            this->textBox6->TabIndex = 12;
            this->textBox6->Text = L"0";
            this->textBox6->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label5
            // 
            this->label5->AutoSize = true;
            this->label5->Location = System::Drawing::Point(125, 105);
            this->label5->Name = L"label5";
            this->label5->Size = System::Drawing::Size(68, 16);
            this->label5->TabIndex = 9;
            this->label5->Text = L"n-Butane";
            // 
            // textBox5
            // 
            this->textBox5->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox5->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox5->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox5->Location = System::Drawing::Point(7, 105);
            this->textBox5->Name = L"textBox5";
            this->textBox5->Size = System::Drawing::Size(115, 15);
            this->textBox5->TabIndex = 10;
            this->textBox5->Text = L"0";
            this->textBox5->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label4
            // 
            this->label4->AutoSize = true;
            this->label4->Location = System::Drawing::Point(125, 84);
            this->label4->Name = L"label4";
            this->label4->Size = System::Drawing::Size(75, 16);
            this->label4->TabIndex = 7;
            this->label4->Text = L"Isobutane";
            // 
            // textBox4
            // 
            this->textBox4->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox4->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox4->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox4->Location = System::Drawing::Point(7, 84);
            this->textBox4->Name = L"textBox4";
            this->textBox4->Size = System::Drawing::Size(115, 15);
            this->textBox4->TabIndex = 8;
            this->textBox4->Text = L"0";
            this->textBox4->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label3
            // 
            this->label3->AutoSize = true;
            this->label3->Location = System::Drawing::Point(125, 63);
            this->label3->Name = L"label3";
            this->label3->Size = System::Drawing::Size(66, 16);
            this->label3->TabIndex = 5;
            this->label3->Text = L"Propane";
            // 
            // textBox3
            // 
            this->textBox3->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox3->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox3->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox3->Location = System::Drawing::Point(7, 63);
            this->textBox3->Name = L"textBox3";
            this->textBox3->Size = System::Drawing::Size(115, 15);
            this->textBox3->TabIndex = 6;
            this->textBox3->Text = L"0,5";
            this->textBox3->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label2
            // 
            this->label2->AutoSize = true;
            this->label2->Location = System::Drawing::Point(125, 42);
            this->label2->Name = L"label2";
            this->label2->Size = System::Drawing::Size(46, 16);
            this->label2->TabIndex = 3;
            this->label2->Text = L"Ethan";
            // 
            // textBox2
            // 
            this->textBox2->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox2->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox2->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox2->Location = System::Drawing::Point(7, 42);
            this->textBox2->Name = L"textBox2";
            this->textBox2->Size = System::Drawing::Size(115, 15);
            this->textBox2->TabIndex = 4;
            this->textBox2->Text = L"4,5";
            this->textBox2->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // label1
            // 
            this->label1->AutoSize = true;
            this->label1->Location = System::Drawing::Point(125, 21);
            this->label1->Name = L"label1";
            this->label1->Size = System::Drawing::Size(66, 16);
            this->label1->TabIndex = 1;
            this->label1->Text = L"Methane";
            // 
            // textBox1
            // 
            this->textBox1->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)), static_cast<System::Int32>(static_cast<System::Byte>(193)),
                static_cast<System::Int32>(static_cast<System::Byte>(72)));
            this->textBox1->BorderStyle = System::Windows::Forms::BorderStyle::None;
            this->textBox1->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->textBox1->Location = System::Drawing::Point(7, 21);
            this->textBox1->Name = L"textBox1";
            this->textBox1->Size = System::Drawing::Size(115, 15);
            this->textBox1->TabIndex = 2;
            this->textBox1->Text = L"95";
            this->textBox1->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
            // 
            // button1
            // 
            this->button1->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
            this->button1->Location = System::Drawing::Point(7, 210);
            this->button1->Name = L"button1";
            this->button1->RightToLeft = System::Windows::Forms::RightToLeft::No;
            this->button1->Size = System::Drawing::Size(227, 36);
            this->button1->TabIndex = 1;
            this->button1->Text = L"Input";
            this->button1->UseVisualStyleBackColor = true;
            this->button1->Click += gcnew System::EventHandler(this, &MyForm::button1_Click);
            // 
            // tabPage2
            // 
            this->tabPage2->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)), static_cast<System::Int32>(static_cast<System::Byte>(47)),
                static_cast<System::Int32>(static_cast<System::Byte>(48)));
            this->tabPage2->Controls->Add(this->dataGridView2);
            this->tabPage2->Controls->Add(this->button5);
            this->tabPage2->Location = System::Drawing::Point(4, 25);
            this->tabPage2->Name = L"tabPage2";
            this->tabPage2->Padding = System::Windows::Forms::Padding(3);
            this->tabPage2->Size = System::Drawing::Size(788, 640);
            this->tabPage2->TabIndex = 1;
            this->tabPage2->Text = L"Output data";
            // 
            // dataGridView2
            // 
            this->dataGridView2->BackgroundColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)),
                static_cast<System::Int32>(static_cast<System::Byte>(47)), static_cast<System::Int32>(static_cast<System::Byte>(48)));
            dataGridViewCellStyle2->Alignment = System::Windows::Forms::DataGridViewContentAlignment::MiddleCenter;
            dataGridViewCellStyle2->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)));
            dataGridViewCellStyle2->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9.75F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point,
                static_cast<System::Byte>(204)));
            dataGridViewCellStyle2->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)), static_cast<System::Int32>(static_cast<System::Byte>(47)),
                static_cast<System::Int32>(static_cast<System::Byte>(48)));
            dataGridViewCellStyle2->SelectionBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)),
                static_cast<System::Int32>(static_cast<System::Byte>(193)), static_cast<System::Int32>(static_cast<System::Byte>(72)));
            dataGridViewCellStyle2->SelectionForeColor = System::Drawing::SystemColors::HighlightText;
            dataGridViewCellStyle2->WrapMode = System::Windows::Forms::DataGridViewTriState::True;
            this->dataGridView2->ColumnHeadersDefaultCellStyle = dataGridViewCellStyle2;
            this->dataGridView2->ColumnHeadersHeightSizeMode = System::Windows::Forms::DataGridViewColumnHeadersHeightSizeMode::AutoSize;
            this->dataGridView2->Columns->AddRange(gcnew cli::array< System::Windows::Forms::DataGridViewColumn^  >(8) {
                this->Column1,
                    this->Column2, this->Column3, this->Column4, this->Column5, this->Column6, this->Column7, this->Column8
            });
            dataGridViewCellStyle3->Alignment = System::Windows::Forms::DataGridViewContentAlignment::MiddleCenter;
            dataGridViewCellStyle3->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)), static_cast<System::Int32>(static_cast<System::Byte>(47)),
                static_cast<System::Int32>(static_cast<System::Byte>(48)));
            dataGridViewCellStyle3->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 9.75F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point,
                static_cast<System::Byte>(204)));
            dataGridViewCellStyle3->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)));
            dataGridViewCellStyle3->SelectionBackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(54)),
                static_cast<System::Int32>(static_cast<System::Byte>(193)), static_cast<System::Int32>(static_cast<System::Byte>(72)));
            dataGridViewCellStyle3->SelectionForeColor = System::Drawing::SystemColors::HighlightText;
            dataGridViewCellStyle3->WrapMode = System::Windows::Forms::DataGridViewTriState::False;
            this->dataGridView2->DefaultCellStyle = dataGridViewCellStyle3;
            this->dataGridView2->GridColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->dataGridView2->Location = System::Drawing::Point(6, 6);
            this->dataGridView2->Name = L"dataGridView2";
            this->dataGridView2->Size = System::Drawing::Size(773, 538);
            this->dataGridView2->TabIndex = 16;
            // 
            // button5
            // 
            this->button5->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
            this->button5->ForeColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(240)), static_cast<System::Int32>(static_cast<System::Byte>(240)),
                static_cast<System::Int32>(static_cast<System::Byte>(240)));
            this->button5->Location = System::Drawing::Point(6, 550);
            this->button5->Name = L"button5";
            this->button5->RightToLeft = System::Windows::Forms::RightToLeft::No;
            this->button5->Size = System::Drawing::Size(773, 36);
            this->button5->TabIndex = 15;
            this->button5->Text = L"Output";
            this->button5->UseVisualStyleBackColor = true;
            this->button5->Click += gcnew System::EventHandler(this, &MyForm::button5_Click);
            // 
            // Column1
            // 
            this->Column1->HeaderText = L"D (m)";
            this->Column1->Name = L"Column1";
            this->Column1->Width = 85;
            // 
            // Column2
            // 
            this->Column2->HeaderText = L"δ (m)";
            this->Column2->Name = L"Column2";
            this->Column2->Width = 85;
            // 
            // Column3
            // 
            this->Column3->HeaderText = L"L (km)";
            this->Column3->Name = L"Column3";
            this->Column3->Width = 85;
            // 
            // Column4
            // 
            this->Column4->HeaderText = L"L_heat (km)";
            this->Column4->Name = L"Column4";
            this->Column4->Width = 85;
            // 
            // Column5
            // 
            this->Column5->HeaderText = L"Δh (m)";
            this->Column5->Name = L"Column5";
            this->Column5->Width = 85;
            // 
            // Column6
            // 
            this->Column6->HeaderText = L"Δh_heat (m)";
            this->Column6->Name = L"Column6";
            this->Column6->Width = 85;
            // 
            // Column7
            // 
            this->Column7->HeaderText = L"ΔP (MPa)";
            this->Column7->Name = L"Column7";
            this->Column7->Width = 85;
            // 
            // Column8
            // 
            this->Column8->HeaderText = L"ΔP_heat (MPa)";
            this->Column8->Name = L"Column8";
            this->Column8->Width = 85;
            // 
            // MyForm
            // 
            this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
            this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
            this->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(46)), static_cast<System::Int32>(static_cast<System::Byte>(47)),
                static_cast<System::Int32>(static_cast<System::Byte>(48)));
            this->ClientSize = System::Drawing::Size(784, 618);
            this->Controls->Add(this->tabControl1);
            this->Name = L"MyForm";
            this->Text = L"MyForm";
            this->tabControl1->ResumeLayout(false);
            this->tabPage1->ResumeLayout(false);
            this->groupBox4->ResumeLayout(false);
            (cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->dataGridView1))->EndInit();
            this->groupBox3->ResumeLayout(false);
            this->groupBox3->PerformLayout();
            this->groupBox2->ResumeLayout(false);
            this->groupBox2->PerformLayout();
            this->groupBox1->ResumeLayout(false);
            this->groupBox1->PerformLayout();
            this->tabPage2->ResumeLayout(false);
            (cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->dataGridView2))->EndInit();
            this->ResumeLayout(false);

        }
#pragma endregion



    
void A_calc(int i)
{
    A0[i] = 0; A1[i] = 0; A2[i] = 0; A3[i] = 0; A4[i] = 0; A5[i] = 0;
    if (i >= 1)
        for (int j = 0; j < 40; j++)
        {
            if (j < num1[i])
            {
                fi_n[i][j] = pow(w[i], r_n[i][j]) * pow(tau[i], -t_n[i][j]) * exp(g_n[i][j] * pow(w[i], l_n[i][j]));
                X_n[i][j] = r_n[i][j] + g_n[i][j] * l_n[i][j] * pow(w[i], l_n[i][j]);
                U_n[i][j] = g_n[i][j] * pow(l_n[i][j], 2) * pow(w[i], l_n[i][j]);
                Y_n[i][j] = -t_n[i][j];
                Q_n[i][j] = 0;
            }
            else
            {
                fi_n[i][j] = pow(w[i], r_n[i][j]) * pow(tau[i], -t_n[i][j]) * exp(-alpha_n[i][j - num1[i]] * pow(w[i] - eps_n[i][j - num1[i]], 2) - betta_n[i][j - num1[i]] * pow(1 / tau[i] - gamma_n[i][j - num1[i]], 2));
                X_n[i][j] = r_n[i][j] - 2 * alpha_n[i][j - num1[i]] * w[i] * (w[i] - eps_n[i][j - num1[i]]);
                U_n[i][j] = -2 * alpha_n[i][j - num1[i]] * w[i] * (2 * w[i] - eps_n[i][j - num1[i]]);
                Y_n[i][j] = 2 * betta_n[i][j - num1[i]] * pow(tau[i], -1) * (pow(tau[i], -1) - gamma_n[i][j - num1[i]]) - t_n[i][j];
                Q_n[i][j] = -2 * betta_n[i][j - num1[i]] * pow(tau[i], -1) * (2 * pow(tau[i], -1) - gamma_n[i][j - num1[i]]);
            }

            A0_n[i][j] = b_n[i][j] * fi_n[i][j] * X_n[i][j];
            A1_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] * (X_n[i][j] + 1) + U_n[i][j]);
            A2_n[i][j] = b_n[i][j] * fi_n[i][j] * X_n[i][j] * (Y_n[i][j] + 1);
            A3_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] - Y_n[i][j]);
            A4_n[i][j] = -b_n[i][j] * fi_n[i][j] * (Y_n[i][j] + 1);
            A5_n[i][j] = -b_n[i][j] * fi_n[i][j] * (Y_n[i][j] * (Y_n[i][j] + 1) + Q_n[i][j]);

            A0[i] = A0[i] + A0_n[i][j];
            A1[i] = A1[i] + A1_n[i][j];
            A2[i] = A2[i] + A2_n[i][j];
            A3[i] = A3[i] + A3_n[i][j];
            A4[i] = A4[i] + A4_n[i][j];
            A5[i] = A5[i] + A5_n[i][j];
            /*
            if (i == 1)
            {
                cout << "ro[i] = " << ro[i] << endl;
                cout << "w[i] = " << w[i] << endl;
                cout << "tau[i] = " << tau[i] << endl;
            }
            */
        }
    else
    {
        double z_pk = 0.0, p_pk = 0.0, pi_c = 0.0, X_wn = 0.0, X_tn = 0.0, Y_tn = 0.0, delta_w = 0.0, check = 0.0;
        int count = 0;
        double psi[6] =
        {
            0, 0, 0, 0, 0, 0
        };
        double delta[6] =
        {
            1, 1, 0, 1, 0, 1
        };
        double Cp0r_i[n] =
        {
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
        };

        //Расчет

        for (int j = 1; j < n; j++)
        {
            for (int q = 0; q < 5; q++)
            {
                Cp0r_i[j] = Cp0r_i[j] + b[j][q] * pow(T / T_kr[q + 1], q);
                //cout << "kek = " << b[j][q] * pow(T / T_kr[q + 1], q) << endl;
            }
            Cp0r = Cp0r + Cp0r_i[j] * x[j] / 100;
        }

        //Расчет ++
        for (int q = 1; q < n; q++)
            for (int j = 1; j < n; j++)
                ro_kr[0] = ro_kr[0] + x[q] / 100 * x[j] / 100 * alpha[q][j] * pow(pow(M[q] * 1 / ro_kr[q], (double)1 / 3) + pow(M[j] * 1 / ro_kr[j], (double)1 / 3), 3);

        ro_kr[0] = 8 / ro_kr[0];

        //Расчет ++
        for (int q = 1; q < n; q++)
            for (int j = 1; j < n; j++)
            {
                T_kr[0] = T_kr[0] + 0.125 * ro_kr[0] * x[q] / 100 * x[j] / 100 * alpha[q][j] * pow(pow(M[q] * 1 / ro_kr[q], (double)1 / 3) + pow(M[j] * 1 / ro_kr[j], (double)1 / 3), 3) * betta[q][j] * pow(T_kr[q] * T_kr[j], 0.5);
            }

        //Расчет ++
        for (int q = 1; q < n; q++)
        {
            omega[0] = omega[0] + x[q] / 100 * omega[q];
            M[0] = M[0] + x[q] / 100 * M[q];
        }

        //Расчет ++
        for (int q = 0; q < 6; q++)
        {
            psi[q] = 0;
            for (int j = 1; j < n; j++)
                psi[q] = psi[q] + x[j] / 100 * a[q][j];
            psi[q] = psi[q] + delta[q];
        }


        w[i] = 3;
        tau[i] = T / T_kr[0];
        z_pk = 0.291 - 0.08 * omega[0];
        p_pk = R[i] * ro_kr[0] * T_kr[i] * z_pk / 1000;
        pi_c = (p + 0.101325) / p_pk;
        check = -1;

        /*
        cout << "ABS z_pk = " << z_pk << endl;
        cout << "ABS T_pk = " << T_kr[0] << endl;
        cout << "ABS p_pk = " << p_pk << endl;
        cout << "ABS pi = " << pi << endl;
        cout << "ABS ro_kr = " << ro_kr[0] << endl << endl << endl;
        */

        while (System::Math::Abs(check) > pow(10, -6))
        {
            A0[i] = 0;
            A1[i] = 0;
            A2[i] = 0;
            A3[i] = 0;
            for (int j = 0; j < 40; j++)
            {
                if (j < num1[i])
                {
                    fi_n[i][j] = pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]), r_n[i][j]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -t_n[i][j]) * exp(g_n[i][j] * pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]), l_n[i][j]));
                    //X_n
                    X_n[i][j] = psi[1] * r_n[i][j] - psi[4] * t_n[i][j] + g_n[i][j] * pow(psi[0], l_n[i][j]) * psi[1] * l_n[i][j] * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                    //X_wn
                    X_wn = g_n[i][j] * pow(psi[0], l_n[i][j]) * pow(psi[1] * l_n[i][j], 2) * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                    //X_tn
                    X_tn = g_n[i][j] * pow(psi[0], l_n[i][j]) * psi[1] * psi[2] * pow(l_n[i][j], 2) * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                    //Y_n
                    Y_n[i][j] = psi[2] * r_n[i][j] - psi[5] * t_n[i][j] + g_n[i][j] * pow(psi[0], l_n[i][j]) * psi[2] * l_n[i][j] * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                    //Y_tn
                    Y_tn = g_n[i][j] * pow(psi[0], l_n[i][j]) * pow(psi[2] * l_n[i][j], 2) * pow(w[i], psi[1] * l_n[i][j]) * pow(tau[i], psi[2] * l_n[i][j]);
                    //cout << "kek = " << tau[i] << endl;
                }
                else
                {
                    fi_n[i][j] = pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]), r_n[i][j]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -t_n[i][j]) * exp(alpha_n[i][j - num1[i]] * pow(psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - eps_n[i][j - num1[i]], 2) + betta_n[i][j - num1[i]] * pow(pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]], 2));

                    X_n[i][j] = 2 * (alpha_n[i][j - num1[i]] * psi[1] * (psi[0] * pow(w[i], psi[1]) * pow(tau[0], psi[2]) - 1) * psi[0] * pow(w[0], psi[1]) * pow(tau[i], psi[2]) - betta_n[i][j - num1[i]] * psi[4] * (pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1)) + psi[1] * r_n[i][j] - psi[4] * t_n[i][j];

                    X_wn = 2 * (alpha_n[i][j - num1[i]] * pow(psi[1], 2) * (2 * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) + betta_n[i][j - num1[i]] * pow(psi[4], 2) * (2 * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1));

                    X_tn = 2 * (alpha_n[i][j - num1[i]] * psi[1] * psi[2] * (2 * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) + betta_n[i][j - num1[i]] * psi[4] * psi[5] * (2 * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1));

                    Y_n[i][j] = 2 * (alpha_n[i][j - num1[i]] * psi[2] * (psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - betta_n[i][j - num1[i]] * psi[5] * (pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1)) + psi[2] * r_n[i][j] - psi[5] * t_n[i][j];

                    Y_tn = 2 * (alpha_n[i][j - num1[i]] * pow(psi[2], 2) * (2 * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) - 1) * psi[0] * pow(w[i], psi[1]) * pow(tau[i], psi[2]) + betta_n[i][j - num1[i]] * pow(psi[5], 2) * (2 * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1) - gamma_n[i][j - num1[i]]) * pow(psi[3] * pow(w[i], psi[4]) * pow(tau[i], psi[5]), -1));
                }


                A0_n[i][j] = b_n[i][j] * fi_n[i][j] * X_n[i][j];
                A1_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] * (X_n[i][j] + 1) + X_wn);
                A2_n[i][j] = b_n[i][j] * fi_n[i][j] * (X_n[i][j] * (Y_n[i][j] + 1) + X_tn);
                A3_n[i][j] = -b_n[i][j] * fi_n[i][j] * (Y_n[i][j] * (Y_n[i][j] + 1) + Y_tn);

                A0[i] = A0[i] + A0_n[i][j];
                A1[i] = A1[i] + A1_n[i][j];
                A2[i] = A2[i] + A2_n[i][j];
                A3[i] = A3[i] + A3_n[i][j];

            };
            count++;
            delta_w = (pi_c * z_pk / tau[i] - (1 + A0[i]) * w[i]) / (1 + A1[i]);
            check = delta_w / w[i];
            w[i] = w[i] + delta_w;
            //cout << "K = " << count << " delta_w = " << delta_w << endl;
        }
        ro[i] = M[i] * ro_kr[i] * w[i];
        w_ij[i] = pow(pow(10, 6) * R[i] * T / M[i] * (1 + A1[i] + pow(1 + A2[i], 2) / (Cp0r - 1 + A3[i])), 0.5);

        /*
        cout << " A0[" << i << "] = " << A0[i] << endl;
        cout << " A1[" << i << "] = " << A1[i] << endl;
        cout << " A2[" << i << "] = " << A2[i] << endl;
        cout << " A3[" << i << "] = " << A3[i] << endl;
        cout << " ro_kr[" << i << "] = " << ro_kr[i] << endl;
        cout << "K = " << count << endl;
        cout << " ro[" << i << "] = " << ro[i] << endl;
        cout << " w_ij[" << i << "] = " << w_ij[i] << endl;
        cout << " Cp0r[" << i << "] = " << Cp0r << endl;
        */
    }
}
void Methane_calc(int i)
{
    double delta1 = 0.0, delta2 = 0;
    double etta0[11] =
    {
        -0.416356419, 2.05484577, 0, -22.2703691, 70.0225165, -104.06181, 81.8051562, -23.2092635, 3.44474962, 0, -0.025682437
    };
    double lyam0[11] =
    {
        144.641918, -913.837779, 1881.85078, 0, -6432.71916, 12093.1405, -10916.1943, 5397.79036, -1381.18308, 147.172633, 0
    };
    double di[20] =
    {
        71.2946875, -130.591363, 54.9838286, -206.162927, 369.957635, -127.8097, 77.9347036, 335.036935, -510.131059, 44.9995519,
        -20.2810841, -253.323785, 339.829592, 6.45084464, 95.9403127, -122.014216, -13.668108, 17.1195083, -0.490786781, 2.69771125
    };
    double rii[20] =
    {
        1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6
    };
    double tii[20] =
    {
        0, -1, -2, 0, -1, -3, -4, 0, -1, -2, -5, 0, -1, -5, 0, -1, 0, -1, -4
    };
    for (int j = 0; j < 11; j++)
    {
        cv[i] = cv[i] + alpha_i[i][j] * pow(tau[i], j);
        delta1 = delta1 - alpha_i[i][j] / (j + 1);
        if (j > 0)
        {
            delta2 = delta2 - alpha_i[i][j] / (j);
            s[i] = s[i] + alpha_i[i][j] / (j)*pow(tau[i], j);
        }
        h[i] = h[i] + alpha_i[i][j] / (j + 1) * pow(tau[i], j);
    }
    for (int j = 0; j < 6; j++)
    {
        cv[i] = cv[i] + betta_i[i][j] * pow(tau[i], -j - 1);
        delta2 = delta2 + betta_i[i][j] / (j + 1);
        s[i] = s[i] - betta_i[i][j] / (j + 1) * pow(tau[i], -j - 1);
        if (j > 0)
        {
            delta1 = delta1 + betta_i[i][j] / (j);
            h[i] = h[i] - betta_i[i][j] / (j)*pow(tau[i], -j - 1);
        }
    }
    cv[i] = R[i] * (cv[i] - 1);
    h[i] = R[i] * T * (h[i] + 1 / tau[i] * (betta_i[i][0] * log(tau[i]) + delta1 + h00[i]) + h0_0[i] / (R[i] * T));
    s[i] = R[i] * (s[i] + alpha_i[i][0] * log(tau[i]) + delta2 + s00[i] - log(w[i] / p_st * ro_kr[i] * R[i] * T / 1000));

    h[i] = h[i] + A3[i] * R[i] * T;
    s[i] = s[i] + A4[i] * R[i];
    cv[i] = cv[i] + A5[i] * R[i];
    cp[i] = cv[i] + R[i] * pow(1 + A2[i], 2) / (1 + A1[i]);
    /*
    if (i == 1)
    {
        cout << " A[0" << "] = " << A0[i] << endl;
        cout << " A[1" << "] = " << A1[i] << endl;
        cout << " A[2" << "] = " << A2[i] << endl;
        cout << " A[3" << "] = " << A3[i] << endl;
        cout << " A[4" << "] = " << A4[i] << endl;
        cout << " A[5" << "] = " << A5[i] << endl;
    }
    */
    //cout << " A[5" << "] = " << A5[i] << endl;
    w_ij[i] = pow(1000 * R[i] * T * cp[i] / cv[i] * (1 + A1[i]), 0.5);

    for (int j = 0; j < 11; j++)
    {
        etta[i] = etta[i] + etta0[j] * pow(tau[i], double(j - 5) / 2);
        lyam[i] = lyam[i] + lyam0[j] * pow(tau[i], double(j - 5) / 2);
    }

    for (int j = 0; j < 15; j++)
    {
        etta[i] = etta[i] + ci[i][j] * pow(w[i], ri[i][j]) / pow(tau[i], -ti[i][j]);
    }

    for (int j = 0; j < 19; j++)
    {
        lyam[i] = lyam[i] + di[j] * double(pow(w[i], rii[j]) / pow(tau[i], tii[j]));
    }

    lyam[i] = lyam[i] + di[19] * pow(w[i], 0.5) / pow(abs(tau[i] - 1) + 0.9 * pow(abs(w[i] - 1), double(1 / 0.35)), 0.6);
    p_np = p_np + pow(10, 6.61184 - 389.93 / (266.00 + T - 273.15)) * md[i] * p_mm;
    /*
    cout << "h_methane : " << h[i] << endl;
    cout << "s_methane : " << s[i] << endl;
    cout << "cv_methane : " << cv[i] << endl;
    cout << "cp_methane : " << cp[i] << endl;
    cout << "wij_methane : " << w_ij[i] << endl;
    cout << "etta_methane : " << etta[i] << endl;
    cout << "lyam_methane : " << lyam[i] << endl;
    */
}
void Ethane_calc(int i)
{
    double etta0[7] =
    {
        0.539268011, -4.97041152, 19.2966378, -39.3767218, 39.5123785, -6.45466356, 0.927484519
    };
    double lyam0[11] =
    {
        4.27991755, -56.2964648, 314.495616, -968.08057, 1756.32364, -1864.76233, 1073.59347, -258.465947, 21.3968254
    };
    double di[18] =
    {
        65.8439106, -91.2731968, 21.1180084, -165.252445, 308.471375, -65.4735002, 30.9692099, -8.23095885, 152.993334,
        -255.188636, -10.2402215, -61.1836818, 111.953711, 9.03868484, -18.6326042, 2.32920738, 0.012323284, 1.7220753
    };
    double rii[18] =
    {
        1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5
    };
    double tii[20] =
    {
        0, 1, 4, 0, 1, 2, 3, 4, 0, 1, 3, 0, 1, 0, 1, 2, 5
    };

    for (int j = 0; j < 7; j++)
    {
        cp[i] = cp[i] + alpha_i[i][j] * pow(T / 100, j);
    }
    for (int j = 0; j < 5; j++)
    {
        cp[i] = cp[i] + betta_i[i][j] * pow(T / 100, -j - 1);
    }
    cp[i] = cp[i] * R[i];
    cv[i] = cp[i] - R[i];

    cv[i] = cv[i] + A5[i] * R[i];
    cp[i] = cv[i] + R[i] * pow(1 + A2[i], 2) / (1 + A1[i]);
    w_ij[i] = pow(1000 * R[i] * T * cp[i] / cv[i] * (1 + A1[i]), 0.5);

    //Вычисление интеграла по формуле по формуле центральных прямугольников
    double cp0_integreate_ethane = 0;
    double integrate_cp_ethan = 0;
    double integrate_cp_T_ethan = 0;


    for (double Tk = 100; Tk < T; Tk += 0.1)
    {
        cp0_integreate_ethane = 0;
        for (int j = 0; j < 7; j++)
        {
            cp0_integreate_ethane = cp0_integreate_ethane + alpha_i[i][j] * pow(Tk / 100, j);
        }
        for (int j = 0; j < 5; j++)
        {
            cp0_integreate_ethane = cp0_integreate_ethane + betta_i[i][j] * pow(Tk / 100, -j - 1);
        }
        cp0_integreate_ethane = cp0_integreate_ethane * R[i];
        integrate_cp_ethan = integrate_cp_ethan + cp0_integreate_ethane * 0.1;
        integrate_cp_T_ethan = integrate_cp_T_ethan + cp0_integreate_ethane / Tk * 0.1;
    }
    h[i] = integrate_cp_ethan + h00[i] + h0_0[i];
    s[i] = integrate_cp_T_ethan + s00[i] * R[i];

    h[i] = h[i] + A3[i] * R[i] * T;
    s[i] = s[i] + R[i] * (A4[i] - log(w[i] / p_st * ro_kr[i] * R[i] * T / 1000));

    for (int j = 0; j < 7; j++)
        etta[i] = etta[i] + etta0[j] * pow(tau[i], double(j - 3) / 2);
    for (int j = 0; j < 9; j++)
        lyam[i] = lyam[i] + lyam0[j] * pow(tau[i], double(j - 4) / 2);
    for (int j = 0; j < 12; j++)
    {
        etta[i] = etta[i] + ci[i][j] * pow(w[i], ri[i][j]) / pow(tau[i], ti[i][j]);
    }
    for (int j = 0; j < 17; j++)
    {
        lyam[i] = lyam[i] + di[j] * double(pow(w[i], rii[j]) / pow(tau[i], tii[j]));
    }
    lyam[i] = lyam[i] + di[17] * pow(w[i], 0.5) / pow(abs(tau[i] - 1) + 0.9 * pow(abs(w[i] - 1), double(1 / 0.35)), 0.6);

    /*
    cout << "A4 : " << A4[i] << endl;
    cout << "R : " << R[i] << endl;
    cout << "w : " << w[i] << endl;
    cout << "ro_kr : " << ro_kr[i] << endl;
    cout << "h_ethane : " << h[i] << endl;
    cout << "s_ethane : " << s[i] << endl;
    cout << "cv_ethane : " << cv[i] << endl;
    cout << "cp_ethane : " << cp[i] << endl;
    cout << "wij_ethane : " << w_ij[i] << endl;
    cout << "etta_ethane : " << etta[i] << endl;
    cout << "lyam_ethane : " << lyam[i] << endl;
    */
    p_np = p_np + exp(log(760 / 101.325) - 5.381564 * log(T) - 2626.727 / T + 46.39131 + 1.601858 * pow(10, -5) * pow(T, 2)) * md[i] * p_mm;
}
void Propane_calc(int i)
{
    double aii[9] =
    {
        -0.603254473, 6.06748845, -25.4677194, 57.2408282, -70.928419, 44.5672908, 0, 0, -0.842908531
    };
    double aij[3] =
    {
        -1.24778, 8.16371, 19.9374
    };
    double bij[2][5] =
    {
        {
            -36.95, 148.658, -119.986, 41.2431, -4.86905
        },
        {
            48.2798, -135.636, 117.588, -43.6911, 6.16079
        }
    };

    double theta_n = 1 / tau[i];
    double E[4] = { 0, 0, 0, 0 };
    double D[4] = { 0, 0, 0, 0 };
    double con_1 = 0, con_2 = 0, con_3 = 0;

    for (int j = 0; j < 4; j++)
    {
        E[j] = exp(-theta_n * betta_i[i][j]);
        D[j] = betta_i[i][j] * theta_n / (1 - E[j]);
        con_1 = con_1 + E[j] * pow(D[j], 2) * alpha_i[i][j + 3];
        con_2 = con_2 + alpha_i[i][j + 3] * (E[j] * D[j] - log(1 - E[j]));
        con_3 = con_3 + E[j] * D[j] * alpha_i[i][j + 3];
    }
    cv[i] = R[i] * (alpha_i[i][2] + con_1);
    h[i] = R[i] * T * (1 + alpha_i[i][1] * theta_n + alpha_i[i][2] + con_3 + h0_0[i] / (R[i] * T));
    s[i] = R[i] * (alpha_i[i][2] * (1 - log(theta_n)) - alpha_i[i][0] + con_2 + s00[i] / R[i] - log(w[i]));

    cv[i] = cv[i] + A5[i] * R[i];
    cp[i] = cv[i] + R[i] * pow(1 + A2[i], 2) / (1 + A1[i]);
    h[i] = h[i] + A3[i] * R[i] * T;
    s[i] = s[i] + R[i] * A4[i];
    w_ij[i] = pow(1000 * R[i] * T * cp[i] / cv[i] * (1 + A1[i]), 0.5);

    double tau_c_propane = tau[i] * T_kr[i] / 369.825;
    double w_c_propane = w[i] * ro_kr[i] / 220.49;
    double etta_propane = 0;

    for (int j = 0; j < 9; j++)
    {
        etta[i] = etta[i] + aii[j] * pow(tau_c_propane, double(j - 4) / 2);
    }
    for (int j = 0; j < 15; j++)
    {
        etta_propane = etta_propane + ci[i][j] * pow(w_c_propane, ri[i][j]) / pow(tau_c_propane, ti[i][j]);
    }
    etta[i] = etta[i] * exp(etta_propane);

    double tau_l_propane = T / 369.82;
    double w_l_propane = ro[i] / 220.3;
    double kB_propane = 0.01380658;
    double R0_propane = 1.03;
    double v_propane = 0.63;
    double gamma_propane = 1.239;
    double X_w_propane = 0, X_w_ref_propane = 0, delta_X_propane = 0;
    double zc_propane = 0.9834;
    double T_ref_propane = 554.73;
    double G_ref_propane = 0.09261595;
    double eps0_propane = 0.194;
    double qD_propane = 0.6490458;
    double eps_ref_propane = 0;
    double omega0_propane = 0;
    double omega_propane = 0;
    double tau_ref_propane = 554.73 / T_kr[i];

    for (int j = 0; j < 3; j++)
    {
        lyam[i] = lyam[i] + aij[j] * pow(tau_l_propane, j);
    }
    for (int j = 0; j < 5; j++)
    {
        lyam[i] = lyam[i] + (bij[0][j] + bij[1][j] * tau_l_propane) * pow(w_l_propane, j + 1);
    }
    X_w_propane = w[i] * zc_propane / (tau[i] * (1 + A1[i]));
    X_w_ref_propane = w[i] * zc_propane / (tau_ref_propane * (1 + A1[i]));
    delta_X_propane = (X_w_propane - X_w_ref_propane * T_ref_propane / T) / G_ref_propane;
    if (delta_X_propane >= 0)
    {
        eps_ref_propane = eps0_propane * pow(delta_X_propane, v_propane / gamma_propane);
        omega0_propane = 2 / pi * (1 - exp(-1 / (pow(eps_ref_propane / qD_propane, -1) + double(1 / 3) * pow(eps_ref_propane / qD_propane * 1 / w[i], 2))));
        omega_propane = 2 / pi * ((1 - cv[i] / cp[i]) * atan(eps_ref_propane / qD_propane) + cv[i] / cp[i] * (eps_ref_propane / qD_propane));
    }
    p_np = p_np + pow(10, 6.82973 - 813.20 / (248.0 + T - 273.15)) * md[i] * p_mm;
    /*
    cout << "h_propane : " << h[i] << endl;
    cout << "s_propane : " << s[i] << endl;
    cout << "cv_propane : " << cv[i] << endl;
    cout << "cp_propane : " << cp[i] << endl;
    cout << "wij_propane : " << w_ij[i] << endl;
    cout << "etta_propane : " << etta[i] << endl;
    cout << "lyam_propane : " << lyam[i] << endl;
    */
}
void pump_h(int ii)
{
    double lyam_tr = 0.0;
    double G = V * ro[0] / (t_tr * 3600);
    double w_s = V / (t_tr * 900 * pi * pow(d[ii], 2));
    double Re = w_s * d[ii] * ro[0] / etta[0];
    //cout << " G = " << G << endl;
    //cout << " w_s = " << w_s << endl;
    //cout << " Re = " << Re << endl;

    if (Re >= 4000 && Re < 10 * d[ii] / k_e)
    {
        lyam_tr = 0.3164 / pow(Re, 0.25);
    }
    else
        if (Re >= 10 * d[ii] / k_e && Re < 560 * d[ii] / k_e)
        {
            lyam_tr = 0.11 * pow(k_e / d[ii] + 68 / Re, 0.25);
        }
        else
            if (Re >= 560 * d[ii] / k_e)
            {
                lyam_tr = 0.11 * pow(k_e / d[ii], 0.25);
            }
    double A_tr = 8 * lyam_tr * pow(G, 3) / (pow(d[ii], 5) * pow(pi, 2) * pow(ro[0], 2));
    //cout << " lyam_tr = " << lyam_tr << endl;
    //cout << " A_tr = " << A_tr << endl;

    double d0 = 0;
    for (int i = 0; i < k_iz; i++)
    {
        d0 = d0 + h_iz[ii][i];
    }
    d0 = d0 * 2 + d[ii];

    double pe_w = cp_w * lyam_w / lyam_iz[ii][0] * w_s * d0;
    //cout << " pe_w = " << pe_w << endl;
    double pr_w = pe_w / Re;
    //cout << " pr_w = " << pr_w << endl;
    double nu_w = 0.5 * pow(Re, 0.5) * pow(pr_w, 0.38);
    //cout << " nu_w = " << nu_w << endl;
    double alpha_2 = lyam_iz[ii][0] * nu_w / d0;
    //cout << " alpha_2 = " << alpha_2 << endl;

    double alpha_1 = 0.021 / pow(pr_w, 0.25) * pow(w_s * d[ii], 0.8) / pow(etta[0] / ro[0], 0.12) * pow(cp[0] * ro[0] / lyam[0], 0.68);
    //cout << " alpha_1 = " << alpha_1 << endl;
    double k0 = 0;
    for (int i = 0; i < k_iz; i++)
    {
        k0 = k0 + h_iz[ii][i] / lyam_iz[ii][i];
    }
    //MessageBox::Show(Convert::ToString(k0), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);

    //cout << " k0 = " << k0 << endl;
    double k_t = 1 / (1 / alpha_1 + 1 / alpha_2 + k0);
    //cout << " k = " << k_t << endl;

    x_tr = x_tr + delta_x;
    double Shu = k_t * pi * d[ii] * delta_x / (G * cv[0]);
    double i_x = lyam_tr * 8 * pow(G / ro[0], 2) / (d[ii] * pow(pi, 2) * 9.81);
    double b_x = G * 9.81 * i_x / (k_t * pi * d[ii] * ro[0]);


    //cout << T << endl;
    h_tr = h_tr + i_x * delta_x;
    T = T_w + (T - T_w) * exp(-Shu) + b_x * (1 - exp(-Shu));
    //MessageBox::Show(Convert::ToString(k_t), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
    //MessageBox::Show(Convert::ToString(i_x), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);

    p = (p * pow(10, 6) - i_x * delta_x * ro[0]) / pow(10, 6);

    //MessageBox::Show(Convert::ToString(i_x), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);

    //MessageBox::Show(Convert::ToString(lyam_tr), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
     
    if ((T >= T_f) || (p * pow(10, 6) <= p_np) || (ro[0] <= 300))
    {
        //
        //MessageBox::Show(Convert::ToString(b_x), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
        //MessageBox::Show(Convert::ToString(i_x), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
    //cout << G << endl;
    //cout << "ETTA[" << 0 << "] = " << etta[0] << endl;
    //cout << "Nu[" << 0 << "] = " << etta[0] / ro[0] << endl;
    //cout << "ro[" << 0 << "] = " << ro[0] << endl;
    //cout << "lyam[" << 0 << "] = " << lyam[0] << endl;
    //cout << "h[" << 0 << "] = " << h[0] << endl;
    //cout << "p_np (T) = " << p_np << endl;
    //cout << "Cp[" << 0 << "] = " << cp[0] << endl;
    //cout << "Cp0r = " << Cp0r << endl;

    //cout << "k0 = " << k0 << endl;
    //cout << "k = " << k_t << endl;
    //cout << "i = " << i_x << endl;
    //cout << "b = " << b_x << endl;
    //cout << "Shu = " << Shu << endl;
    //cout << "T = " << T << endl;
    //cout << "x = " << x_tr << endl;
    //cout << "p = " << p << endl << endl << endl;
    //cout << "d[" << ii << "] = " << d[ii] << endl;
    }
}
void pump(int ii)
{
    double lyam_tr = 0.0;
    double G = V * ro[0] / (t_tr * 3600);
    double w_s = V / (t_tr * 900 * pi * pow(d[ii], 2));
    double Re = w_s * d[ii] * ro[0] / etta[0];
    //cout << " G = " << G << endl;
    //cout << " w_s = " << w_s << endl;
    //cout << " Re = " << Re << endl;

    if (Re >= 4000 && Re < 10 * d[ii] / k_e)
    {
        lyam_tr = 0.3164 / pow(Re, 0.25);
    }
    else
        if (Re >= 10 * d[ii] / k_e && Re < 560 * d[ii] / k_e)
        {
            lyam_tr = 0.11 * pow(k_e / d[ii] + 68 / Re, 0.25);
        }
        else
            if (Re >= 560 * d[ii] / k_e)
            {
                lyam_tr = 0.11 * pow(k_e / d[ii], 0.25);
            }
    double A_tr = 8 * lyam_tr * pow(G, 3) / (pow(d[ii], 5) * pow(pi, 2) * pow(ro[0], 2));
    //cout << " lyam_tr = " << lyam_tr << endl;
    //cout << " A_tr = " << A_tr << endl;

    double d0 = 0;
    for (int i = 0; i < k_iz; i++)
    {
        d0 = d0 + h_iz[ii][i];
    }
    d0 = d0 * 2 + d[ii];

    double pe_w = cp_w * lyam_w / lyam_iz[ii][0] * w_s * d0;
    //cout << " pe_w = " << pe_w << endl;
    double pr_w = pe_w / Re;
    //cout << " pr_w = " << pr_w << endl;
    double nu_w = 0.5 * pow(Re, 0.5) * pow(pr_w, 0.38);
    //cout << " nu_w = " << nu_w << endl;
    double alpha_2 = lyam_iz[ii][0] * nu_w / d0;
    //cout << " alpha_2 = " << alpha_2 << endl;

    double alpha_1 = 0.021 / pow(pr_w, 0.25) * pow(w_s * d[ii], 0.8) / pow(etta[0] / ro[0], 0.12) * pow(cp[0] * ro[0] / lyam[0], 0.68);
    //cout << " alpha_1 = " << alpha_1 << endl;
    double k0 = 0;
    for (int i = 0; i < k_iz; i++)
    {
        k0 = k0 + h_iz[ii][i] / lyam_iz[ii][i];
    }
    

    //cout << " k0 = " << k0 << endl;
    double k_t = 1 / (1 / alpha_1 + 1 / alpha_2 + k0);
    //cout << " k = " << k_t << endl;

    x_tr = x_tr + delta_x;
    double Shu = k_t * pi * d[ii] * delta_x / (G * cv[0]);
    double i_x = lyam_tr * 8 * pow(G / ro[0], 2) / (d[ii] * pow(pi, 2) * 9.81);


    //cout << T << endl;
    h_tr = h_tr + i_x * delta_x;
    T = T_w + (T - T_w) * exp(-Shu);
    
    p = (p * pow(10, 6) - i_x * delta_x * ro[0]) / pow(10, 6);
}

private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e)
{
    x[1] = Convert::ToDouble(textBox1->Text);
    x[2] = Convert::ToDouble(textBox2->Text);
    x[3] = Convert::ToDouble(textBox3->Text);
    x[4] = Convert::ToDouble(textBox4->Text);
    x[5] = Convert::ToDouble(textBox5->Text);
    x[6] = Convert::ToDouble(textBox6->Text);
    x[7] = Convert::ToDouble(textBox7->Text);
    x[8] = Convert::ToDouble(textBox8->Text);
    x[9] = Convert::ToDouble(textBox9->Text);
    //MessageBox::Show
    //(
    //	Convert::ToString(x[2]),
    //	"Закрытие", 
    //	MessageBoxButtons::OK, 
    //	MessageBoxIcon::Warning
    //);

}
private: System::Void button2_Click(System::Object^ sender, System::EventArgs^ e) 
{
    p = Convert::ToDouble(textBox10->Text);
    T = Convert::ToDouble(textBox11->Text);
    T_f = Convert::ToDouble(textBox12->Text);
    V = Convert::ToDouble(textBox13->Text);
    t_tr = Convert::ToDouble(textBox14->Text);
}
private: System::Void button3_Click(System::Object^ sender, System::EventArgs^ e) 
{
    ro_w = Convert::ToDouble(textBox15->Text);
    cp_w = Convert::ToDouble(textBox16->Text);
    lyam_w = Convert::ToDouble(textBox17->Text);
    T_w = Convert::ToDouble(textBox18->Text);
}
private: System::Void button4_Click(System::Object^ sender, System::EventArgs^ e)
{
    OpenFileDialog^ openFileDialog1 = gcnew OpenFileDialog;
    openFileDialog1->Filter = "(excel file(*.xlsx)|*.xlsx";
    openFileDialog1->FilterIndex = 2;
    openFileDialog1->RestoreDirectory = true;
    System::Data::DataTable^ tb = gcnew Data::DataTable;
    String^ FileName = "";

    if (openFileDialog1->ShowDialog() == System::Windows::Forms::DialogResult::OK)
        try
    {
        FileName = openFileDialog1->FileName;
        Excel::Application^ ExcelApp1 = gcnew Excel::ApplicationClass();
        Excel::Workbook^ WorkBook1 = ExcelApp1->Workbooks->Open(FileName, 0, true, 5, "", "", true, Excel::XlPlatform::xlWindows, "\t", false, false, 0, true, 1, 0);
        //MessageBox::Show(FileName, L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
        int SheetNumber;
        for (SheetNumber = 1; SheetNumber <= WorkBook1->Sheets->Count; SheetNumber++)
        {
        }
        Excel::Worksheet^ WorkSheet1 = (Excel::Worksheet^)WorkBook1->ActiveSheet;
        Excel::Range^ ExcelRange1 = WorkSheet1->UsedRange;

        int RowIndex = Convert::ToInt32(ExcelRange1->Rows->CountLarge->ToString());
        int ColumnIndex = Convert::ToInt32(ExcelRange1->Columns->CountLarge->ToString());


        String^ CellValue = nullptr;
        DataTable^ table = gcnew DataTable();
        DataRow^ row = nullptr;

        for (int i = 1; i <= RowIndex; i++)
        {
            for (int j = 1; j <= ColumnIndex; j++)
            {
                table->Columns->Add(((Excel::Range^)WorkSheet1->Cells[i, j])->Value2->ToString());
                /*
                if (((Excel::Range^)WorkSheet1->Cells[i, j])->Value2 != nullptr)
                {
                    //CELL HAS A VALUE
                    CellValue = ((Excel::Range^)WorkSheet1->Cells[i, j])->Value2->ToString();
                }
                else
                {
                }
                */
            };
            break;
        };

        int rowCounter = 0;
        for (int i = 2; i <= RowIndex; i++)
        {
            row = table->NewRow();
            rowCounter = 0;
            for (int j = 1; j <= ColumnIndex; j++)
            {
                if ((ExcelRange1->Cells[i, j]) != nullptr && ((Excel::Range^)WorkSheet1->Cells[i, j])->Value2 != nullptr)
                {
                    row[rowCounter] = ((Excel::Range^)WorkSheet1->Cells[i, j])->Value2->ToString();
                }
                else
                {
                    row[i] = "";
                }
                rowCounter++;
            }
            table->Rows->Add(row);
        }


        dataGridView1->DataSource = table;
        GC::Collect();
        GC::WaitForPendingFinalizers();
        WorkBook1->Close(false, "J:\\abc.xlsx", nullptr);
        ExcelApp1->Quit();
    }
    catch (Exception^ e)
    {
        MessageBox::Show(L"Error:\n" + e, L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
    }

    for (int i = 0; i < dataGridView1->Rows->Count - 1; i++)
        for (int j = 0; j < dataGridView1->Columns->Count - 1; j++)
        {
            //MessageBox::Show(dataGridView1->Rows[i]->Cells[j]->Value->ToString(), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
            switch (j)
            {
            case 0:
                D[i] = Convert::ToDouble(dataGridView1->Rows[i]->Cells[j]->Value);
                //MessageBox::Show(dataGridView1->Rows[i]->Cells[j]->Value->ToString(), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
                break;
            case 1:
                delta_d[i] = Convert::ToDouble(dataGridView1->Rows[i]->Cells[j]->Value);
                k_iz = 0;
                h_iz[i][k_iz] = Convert::ToDouble(dataGridView1->Rows[i]->Cells[j]->Value);
                //MessageBox::Show(dataGridView1->Rows[i]->Cells[j]->Value->ToString(), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
                break;
            default:
                if (j % 2 == 0)
                {
                    lyam_iz[i][k_iz] = Convert::ToDouble(dataGridView1->Rows[i]->Cells[j]->Value);
                }
                else
                {
                    k_iz++;
                    h_iz[i][k_iz] = Convert::ToDouble(dataGridView1->Rows[i]->Cells[j]->Value);
                    //MessageBox::Show(Convert::ToString(h_iz[i][j - 1]), L"Error", MessageBoxButtons::OK, MessageBoxIcon::Error);
                }
            }
        };
}
private: System::Void button5_Click(System::Object^ sender, System::EventArgs^ e)
{
    for (int i = 1; i < n; i++)
    {
        md[i] = x[i] / 100 * M[i];
        md[0] = md[0] + md[i];
    }
    for (int i = 1; i < n; i++)
        md[i] = md[i] / md[0];
    for (int i = 0; i < k_d; i++)
    {
        d[i] = D[i] - 2 * delta_d[i];
    }

    dataGridView2->Rows->Clear();
    dataGridView2->Rows->Add(dataGridView1->Rows->Count - 1);
    
    

    for (int ii = 0; ii < dataGridView2->Rows->Count - 1; ii++)
    {
        //int ii = 0;
        //Начальное значение
        x_tr = 0.0;
        ro[0] = 300;
        p = Convert::ToDouble(textBox10->Text);
        T = Convert::ToDouble(textBox11->Text);
        p_np = 0.0;
        h_tr = 0.0;

        while ((T <= T_f) && (p * pow(10, 6) > p_np) && (ro[0] >= 300))
        {
            //Цикл обнуления переменных
            int x_ = 0, y_ = 0;
            for (int i = 0; i < n; i++)
            {
                A0[i] = 0, A1[i] = 0, A2[i] = 0, A3[i] = 0, A4[i] = 0, A5[i] = 0, etta[i] = 0,
                    lyam[i] = 0, h[i] = 0, s[i] = 0, cp[i] = 0, cv[i] = 0, w_ij[i] = 0, w[i] = 0,
                    tau[i] = 0, ro[i] = 0;
            }
            ro_kr[0] = 0, T_kr[0] = 0, Cp0r = 0, M[0] = 0, p_np = 0, omega[0] = 0;

            //Подбор коэффициентов температуры и давления по табличке для интерполяции
            for (int i = 0; i < 7; i++)
            {
                if (p >= P_lin[i])
                    y_ = i;
                if (i < 5 && T >= T_lin[i])
                    x_ = i;
            }
            //Подбор коэффициентов относительной температуры и давления, а также расчет плотности при температуре T
            for (int i = 1; i < n; i++)
            {
                ro[i] = ro_c[i][y_][x_] + 0.5 * (ro_c[i][y_][x_ + 1] - ro_c[i][y_][x_] + ro_c[i][y_ + 1][x_ + 1] - ro_c[i][y_ + 1][x_]) / (T_lin[x_ + 1] - T_lin[x_]) * (T - T_lin[x_]);
                w[i] = ro[i] / ro_kr[i];
                tau[i] = T / T_kr[i];
            }

            //Общий расчет газов
            for (int i = 0; i < 4; i++)
            {
                //Расчет вычислительных коэффициентов A0 - A5
                A_calc(i);
                //Вычисление параметров каждого газа
                switch (i)
                {
                case 0: // 0 - LNG
                {
                }
                break;

                case 1: // 1 - Methane
                {
                    Methane_calc(i);
                }
                break;

                case 2: // 2 - Ethane
                {
                    Ethane_calc(i);
                }
                break;

                case 3: // 3 - Propane
                {
                    Propane_calc(i);
                }
                break;

                case 4: // 4 - Iso-buthan
                    break;

                case 5: // 5 - N-buthan
                    break;

                case 6: // 6 - Iso-penthane
                    break;

                case 7: // 7 - N-penthane
                    break;

                case 8: // 8 - Nitrogen
                    break;

                case 9: // 9 - Carbon dioxide
                    break;

                default:
                    break;
                }

                if (i != 0)
                {
                    etta[0] = etta[0] + log10(etta[i]) * x[i] / 100;
                    lyam[0] = lyam[0] + lyam[i] * md[i];
                    h[0] = h[0] + h[i] * md[i];
                    cp[0] = cp[0] + cp[i] * md[i];
                    cv[0] = cv[0] + cv[i] * md[i];
                    //cout << " cp[" << i << "] = " << cp[i] << endl;
                    //cv[0] = ...;
                }
                //cout << " ETTA[" << i << "] = " << etta[i] << endl;
                //cout << " M[" << i << "] = " << M[i] / 100 << endl;
            };
            etta[0] = pow(10, etta[0]) * pow(10, -6);
            lyam[0] = lyam[0] * pow(10, -3);
            Cp0r = Cp0r * pow(10, 3);
            cp[0] = cp[0] * pow(10, 3);
            cv[0] = cv[0] * pow(10, 3);

            pump_h(ii);
        }
        
        dataGridView2->Rows[ii]->Cells[0]->Value = Convert::ToString(D[ii]);
        dataGridView2->Rows[ii]->Cells[1]->Value = Convert::ToString(delta_d[ii]);
        //dataGridView2->Rows[ii]->Cells[2]->Value = Convert::ToString(0);
        dataGridView2->Rows[ii]->Cells[3]->Value = Convert::ToString(x_tr / 1000);
        //dataGridView2->Rows[ii]->Cells[4]->Value = Convert::ToString(0);
        dataGridView2->Rows[ii]->Cells[5]->Value = Convert::ToString(T);
        //dataGridView2->Rows[ii]->Cells[6]->Value = Convert::ToString(0);
        dataGridView2->Rows[ii]->Cells[7]->Value = Convert::ToString(Convert::ToDouble(textBox10->Text) - p);


        x_tr = 0.0;
        ro[0] = 300;
        p = Convert::ToDouble(textBox10->Text);
        T = Convert::ToDouble(textBox11->Text);
        p_np = 0.0;
        h_tr = 0.0;

        while ((T <= T_f) && (p * pow(10, 6) > p_np) && (ro[0] >= 300))
        {
            //Цикл обнуления переменных
            int x_ = 0, y_ = 0;
            for (int i = 0; i < n; i++)
            {
                A0[i] = 0, A1[i] = 0, A2[i] = 0, A3[i] = 0, A4[i] = 0, A5[i] = 0, etta[i] = 0,
                    lyam[i] = 0, h[i] = 0, s[i] = 0, cp[i] = 0, cv[i] = 0, w_ij[i] = 0, w[i] = 0,
                    tau[i] = 0, ro[i] = 0;
            }
            ro_kr[0] = 0, T_kr[0] = 0, Cp0r = 0, M[0] = 0, p_np = 0, omega[0] = 0;

            //Подбор коэффициентов температуры и давления по табличке для интерполяции
            for (int i = 0; i < 7; i++)
            {
                if (p >= P_lin[i])
                    y_ = i;
                if (i < 5 && T >= T_lin[i])
                    x_ = i;
            }
            //Подбор коэффициентов относительной температуры и давления, а также расчет плотности при температуре T
            for (int i = 1; i < n; i++)
            {
                ro[i] = ro_c[i][y_][x_] + 0.5 * (ro_c[i][y_][x_ + 1] - ro_c[i][y_][x_] + ro_c[i][y_ + 1][x_ + 1] - ro_c[i][y_ + 1][x_]) / (T_lin[x_ + 1] - T_lin[x_]) * (T - T_lin[x_]);
                w[i] = ro[i] / ro_kr[i];
                tau[i] = T / T_kr[i];
            }

            //Общий расчет газов
            for (int i = 0; i < 4; i++)
            {
                //Расчет вычислительных коэффициентов A0 - A5
                A_calc(i);
                //Вычисление параметров каждого газа
                switch (i)
                {
                case 0: // 0 - LNG
                {
                }
                break;

                case 1: // 1 - Methane
                {
                    Methane_calc(i);
                }
                break;

                case 2: // 2 - Ethane
                {
                    Ethane_calc(i);
                }
                break;

                case 3: // 3 - Propane
                {
                    Propane_calc(i);
                }
                break;

                case 4: // 4 - Iso-buthan
                    break;

                case 5: // 5 - N-buthan
                    break;

                case 6: // 6 - Iso-penthane
                    break;

                case 7: // 7 - N-penthane
                    break;

                case 8: // 8 - Nitrogen
                    break;

                case 9: // 9 - Carbon dioxide
                    break;

                default:
                    break;
                }

                if (i != 0)
                {
                    etta[0] = etta[0] + log10(etta[i]) * x[i] / 100;
                    lyam[0] = lyam[0] + lyam[i] * md[i];
                    h[0] = h[0] + h[i] * md[i];
                    cp[0] = cp[0] + cp[i] * md[i];
                    cv[0] = cv[0] + cv[i] * md[i];
                    //cout << " cp[" << i << "] = " << cp[i] << endl;
                    //cv[0] = ...;
                }
                //cout << " ETTA[" << i << "] = " << etta[i] << endl;
                //cout << " M[" << i << "] = " << M[i] / 100 << endl;
            };
            etta[0] = pow(10, etta[0]) * pow(10, -6);
            lyam[0] = lyam[0] * pow(10, -3);
            Cp0r = Cp0r * pow(10, 3);
            cp[0] = cp[0] * pow(10, 3);
            cv[0] = cv[0] * pow(10, 3);

            pump(ii);
        }
        dataGridView2->Rows[ii]->Cells[2]->Value = Convert::ToString(x_tr / 1000);
        dataGridView2->Rows[ii]->Cells[4]->Value = Convert::ToString(T);
        dataGridView2->Rows[ii]->Cells[6]->Value = Convert::ToString(Convert::ToDouble(textBox10->Text) - p);

}
    
}

};
}
